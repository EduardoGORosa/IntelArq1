Microsoft (R) Macro Assembler Version 6.11		    09/13/23 24:53:08
trabalho.asm						     Page 1 - 1


				; Trabalho Intel

				.model small
				.stack

 0000				.data
				ORG 80H             
 0080 00			CMDCNT DB ?          ; COMMAND LINE COUNT
 0081  007F [			CMDSTR DB 127 DUP(?)  ; COMMAND LINE BUFFER
        00
       ]
				; --------------------------------------------
				; DATA
				; --------------------------------------------
 = 000D				CR                          equ     0dh
 = 000A				LF                          equ     0ah

 0100  007F [			cmdline               db    127   dup(?)
        00
       ]
 017F  0032 [			input_file            db    50    dup(?)        ; Nome do arquivo de entrada
        00
       ]
 01B1  0032 [			output_file           db    50    dup(?)        ; Nome padrão do arquivo de saída
        00
       ]
 01E3 61 2E 6F 75 74 00		default_output_file   db    'a.out', 0       ; Nome padrão do arquivo de saída
 01E9  0005 [			nitrogen_bases        db    5     dup(?)
        00
       ]
 01EE  0006 [			s_nitrogen_bases      db    6     dup(?)
        00
       ]
 01F4 0000			file_size             dw    0
 01F6  0005 [			file_size_str         db    5     dup(?)
        00
       ]
 01FB 0000			base_lines            dw    0
 01FD 0000			base_a                dw    0
 01FF 0000			base_c                dw    0
 0201 0000			base_t                dw    0
 0203 0000			base_g                dw    0
 0205 00			base_plus             db    0
 0206 0000			position              dw    0
 0208  0005 [			position_str          dw    5     dup(?)
        0000
       ]
 0212 0000			cur_position          dw    0
 0214  0005 [			cur_position_str      dw    5    dup(?)
        0000
       ]
 021E 61 63 74 67 2B 00		base_valid            db    "actg+", 0
 0224 45 72 72 6F 20 6E		error_command_line    db   "Erro na linha de comando", CR, LF, 0
       61 20 6C 69 6E 68
       61 20 64 65 20 63
       6F 6D 61 6E 64 6F
       0D 0A 00
 023F 45 72 72 6F 20 6E		error_command_line_f  db   "Erro no argumento f", CR, LF, 0
       6F 20 61 72 67 75
       6D 65 6E 74 6F 20
       66 0D 0A 00
 0255 45 72 72 6F 20 6E		error_command_line_o  db   "Erro no argumento o", CR, LF, 0
       6F 20 61 72 67 75
       6D 65 6E 74 6F 20
       6F 0D 0A 00
 026B 45 72 72 6F 20 6E		error_command_line_n  db   "Erro no argumento n", CR, LF, 0
       6F 20 61 72 67 75
       6D 65 6E 74 6F 20
       6E 0D 0A 00
 0281 45 72 72 6F 20 6E		error_command_line_a  db   "Erro no argumento actg", CR, LF, 0
       6F 20 61 72 67 75
       6D 65 6E 74 6F 20
       61 63 74 67 0D 0A
       00
 029A 00			flag_error            db     0
 029B 0D 0A 00			msg_crlf              db    CR, LF, 0
 029E 4E 6F 6D 65 20 64		msg_input_file        db    "Nome do arquivo de entrada : ", 0
       6F 20 61 72 71 75
       69 76 6F 20 64 65
       20 65 6E 74 72 61
       64 61 20 3A 20 00
 02BC 4E 6F 6D 65 20 64		msg_output_file       db    "Nome do arquivo de saida : ", 0
       6F 20 61 72 71 75
       69 76 6F 20 64 65
       20 73 61 69 64 61
       20 3A 20 00
 02D8 54 61 6D 61 6E 68		msg_group_size        db    "Tamanho dos grupos de bases a serem calculados: ", 0
       6F 20 64 6F 73 20
       67 72 75 70 6F 73
       20 64 65 20 62 61
       73 65 73 20 61 20
       73 65 72 65 6D 20
       63 61 6C 63 75 6C
       61 64 6F 73 3A 20
       00
 0309 49 6E 66 6F 72 6D		msg_information       db    "Informacoes a serem colocadas no arquivo de saida: ", 0
       61 63 6F 65 73 20
       61 20 73 65 72 65
       6D 20 63 6F 6C 6F
       63 61 64 61 73 20
       6E 6F 20 61 72 71
       75 69 76 6F 20 64
       65 20 73 61 69 64
       61 3A 20 00
 033D 4E 75 6D 65 72 6F		msg_bases_size_input  db    "Numero de bases no arquivo de entrada: ", 0
       20 64 65 20 62 61
       73 65 73 20 6E 6F
       20 61 72 71 75 69
       76 6F 20 64 65 20
       65 6E 74 72 61 64
       61 3A 20 00
 0365 4E 75 6D 65 72 6F		msg_group_count       db    "Numero de grupos a serem processados: ", 0
       20 64 65 20 67 72
       75 70 6F 73 20 61
       20 73 65 72 65 6D
       20 70 72 6F 63 65
       73 73 61 64 6F 73
       3A 20 00
 038C 4E 75 6D 65 72 6F		msg_lines_input_file  db    "Numero de linhas do arquivo de entrada que contém bases: ", 0
       20 64 65 20 6C 69
       6E 68 61 73 20 64
       6F 20 61 72 71 75
       69 76 6F 20 64 65
       20 65 6E 74 72 61
       64 61 20 71 75 65
       20 63 6F 6E 74 C3
       A9 6D 20 62 61 73
       65 73 3A 20 00
 03C7 45 72 72 6F 20 6E		error_open_file_msg   db    "Erro na abertura do arquivo.", CR, LF, 0
       61 20 61 62 65 72
       74 75 72 61 20 64
       6F 20 61 72 71 75
       69 76 6F 2E 0D 0A
       00
 03E6 45 72 72 6F 20 6E		error_read_file_msg   db    "Erro na leitura do arquivo.", CR, LF, 0
       61 20 6C 65 69 74
       75 72 61 20 64 6F
       20 61 72 71 75 69
       76 6F 2E 0D 0A 00
 0404 45 72 72 6F 20 6E		error_create_file_msg db   "Erro na criacao do arquivo", CR, LF, 0
       61 20 63 72 69 61
       63 61 6F 20 64 6F
       20 61 72 71 75 69
       76 6F 0D 0A 00
 0421 45 72 72 6F 20 6E		error_write_file_msg  db    "Erro na escrita do arquivo", CR, LF, 0
       61 20 65 73 63 72
       69 74 61 20 64 6F
       20 61 72 71 75 69
       76 6F 0D 0A 00
 043E 45 72 72 6F 20 63		error_unknown_char_msg db    "Erro caractere indevido na leitura do arquivo", CR, LF, 0
       61 72 61 63 74 65
       72 65 20 69 6E 64
       65 76 69 64 6F 20
       6E 61 20 6C 65 69
       74 75 72 61 20 64
       6F 20 61 72 71 75
       69 76 6F 0D 0A 00
 046E 43 61 72 72 65 67		loading               db    "Carregando",0
       61 6E 64 6F 00
 0479 0000			file_handle           dw    0                      ; Handler do arquivo de leitura
 047B 0000			file_handle_dst       dw    0                      ; Handler do arquivo de saida
 047D 00			file_buffer           db    0                      ; Buffer de leitura do arquivo
 047E 0000			sw_n                  dw    0
 0480 00			sw_f                  db    0
 0481 0000			sw_m                  dw    0
 0483  0006 [			base_a_str            db    6 dup (?)   ; Buffer para o contador de 'A' em formato de string
        00
       ]
 0489  0006 [			base_c_str            db    6 dup (?)   ; Buffer para o contador de 'C' em formato de string
        00
       ]
 048F  0006 [			base_t_str            db    6 dup (?)   ; Buffer para o contador de 'T' em formato de string
        00
       ]
 0495  0006 [			base_g_str            db    6 dup (?)   ; Buffer para o contador de 'G' em formato de string
        00
       ]
 049B  0006 [			base_at_str           db    6 dup (?)   ; Buffer para o contador de 'G' em formato de string
        00
       ]
 04A1  0006 [			base_cg_str           db    6 dup (?)   ; Buffer para o contador de 'G' em formato de string
        00
       ]
 04A7  0005 [			group_size_str        db    5     dup(?)               ; Tamanho do grupo de bases
        00
       ]
 04AC 00			group_size            db    0
				; --------------------------------------------
				; SCAN INPUT PARAMETER LINE

 0000				.code
				.startup
 0017  BE 0081			   mov      si, 81h
 001A  B5 00			   mov      ch,0
 001C  26: 8A 0E 0080		   mov      cl,es:[80h]      ; PARAMETER COUNT by variable CMDCNT
 0021  E8 04CB			   call     get_commandline

 0024  8D 1E 029B R		   lea      bx, msg_crlf
 0028  E8 0484			   call     printf_s

 002B  E8 0606			   call     sort_nitrogen_bases

				   ; Abre o arquivo
 002E  8D 16 017F R		   lea      dx, input_file
 0032  E8 045C			   call     fopen
 0035  73 03 E9 0342		   jc       error_open_file      ; If (CF == 1), erro ao abrir o arquivo
 003A  A3 0479 R		   mov      file_handle, ax      ; Salva handle do arquivo

 003D  8D 1E 029E R		   lea      bx, msg_input_file
 0041  E8 046B			   call     printf_s
 0044  8D 1E 017F R		   lea      bx, input_file
 0048  E8 0464			   call     printf_s

 004B  8D 1E 029B R		   lea      bx, msg_crlf
 004F  E8 045D			   call     printf_s

 0052  8D 1E 0479 R		   lea      bx, file_handle
 0056  E8 0657			   call     calculate_file_size

 0059  A1 01F4 R		   mov      ax, file_size
 005C  8D 1E 01F6 R		   lea      bx, file_size_str
 0060  E8 03C1			   call     sprintf_w

 0063  8D 1E 01B1 R		   lea      bx, output_file
 0067  83 3F 00			   cmp      [bx], 0
 006A  74 02			   je       default_file
 006C  EB 2A			   jmp      cmd_output_file

 006E				default_file:
 006E  8D 16 01E3 R		   lea      dx, default_output_file
 0072  E8 042D			   call     fcreate
 0075  73 03 E9 031F		   jc       error_create_file
 007A  A3 047B R		   mov      file_handle_dst, ax      ; Salva handle do arquivo
 007D  8D 1E 047B R		   lea      bx, file_handle_dst
 0081  8D 1E 02BC R		   lea      bx, msg_output_file
 0085  E8 0427			   call     printf_s
 0088  8D 1E 01E3 R		   lea      bx, default_output_file
 008C  E8 0420			   call     printf_s
 008F  8D 1E 029B R		   lea      bx, msg_crlf
 0093  E8 0419			   call     printf_s
 0096  EB 2A			   jmp      loop_read_file

 0098				cmd_output_file:
 0098  8D 16 01B1 R		   lea      dx, output_file
 009C  E8 0403			   call     fcreate
 009F  73 03 E9 02F5		   jc       error_create_file
 00A4  8D 1E 047B R		   lea      bx, file_handle_dst
 00A8  A3 047B R		   mov      file_handle_dst, ax      ; Salva handle do arquivo
 00AB  8D 1E 02BC R		   lea      bx, msg_output_file
 00AF  E8 03FD			   call     printf_s
 00B2  8D 1E 01B1 R		   lea      bx, output_file
 00B6  E8 03F6			   call     printf_s
 00B9  8D 1E 029B R		   lea      bx, msg_crlf
 00BD  E8 03EF			   call     printf_s
 00C0  EB 00			   jmp      loop_read_file

 00C2				loop_read_file:
 00C2  8D 36 01EE R		      lea   si, s_nitrogen_bases
 00C6				   set_header_bases:
 00C6  80 3C 00			      cmp   byte ptr [si], 0
 00C9  75 03 E9 009A		      je    start_count 
 00CE  80 3C 61			      cmp   byte ptr [si], 'a'
 00D1  74 16			      je    set_header_a
 00D3  80 3C 63			      cmp   byte ptr [si], 'c'
 00D6  74 27			      je    set_header_c
 00D8  80 3C 74			      cmp   byte ptr [si], 't'
 00DB  74 38			      je    set_header_t
 00DD  80 3C 67			      cmp   byte ptr [si], 'g'
 00E0  74 49			      je    set_header_g
 00E2  80 3C 2B			      cmp   byte ptr [si], '+'
 00E5  74 5A			      je    set_header_plus
 00E7  EB 7F			      jmp   start_count

 00E9				   set_header_a:
 00E9  B2 41			      mov   dl, 'A'
 00EB  8B 1E 047B R		      mov   bx, file_handle_dst
 00EF  E8 03D3			      call  set_char
 00F2  46			      inc   si
 00F3  80 3C 00			      cmp   byte ptr [si], 0
 00F6  74 70			      je    start_count
 00F8  B2 3B			      mov   dl, 3bh
 00FA  E8 03C8			      call  set_char
 00FD  EB C7			      jmp   set_header_bases
 00FF				   set_header_c:
 00FF  B2 43			      mov   dl, 'C'
 0101  8B 1E 047B R		      mov   bx, file_handle_dst
 0105  E8 03BD			      call  set_char
 0108  46			      inc   si
 0109  80 3C 00			      cmp   byte ptr [si], 0
 010C  74 5A			      je    start_count
 010E  B2 3B			      mov   dl, 3bh
 0110  E8 03B2			      call  set_char
 0113  EB B1			      jmp   set_header_bases
 0115				   set_header_t:
 0115  B2 54			      mov   dl, 'T'
 0117  8B 1E 047B R		      mov   bx, file_handle_dst
 011B  E8 03A7			      call  set_char
 011E  46			      inc   si
 011F  80 3C 00			      cmp   byte ptr [si], 0
 0122  74 44			      je    start_count
 0124  B2 3B			      mov   dl, 3bh
 0126  E8 039C			      call  set_char
 0129  EB 9B			      jmp   set_header_bases
 012B				   set_header_g:
 012B  B2 47			      mov   dl, 'G'
 012D  8B 1E 047B R		      mov   bx, file_handle_dst
 0131  E8 0391			      call  set_char
 0134  46			      inc   si
 0135  80 3C 00			      cmp   byte ptr [si], 0
 0138  74 2E			      je    start_count
 013A  B2 3B			      mov   dl, 3bh
 013C  E8 0386			      call  set_char
 013F  EB 85			      jmp   set_header_bases

 0141				   set_header_plus:
 0141  B2 41			      mov   dl, 'A'
 0143  8B 1E 047B R		      mov   bx, file_handle_dst
 0147  E8 037B			      call  set_char
 014A  B2 2B			      mov   dl, 2bh
 014C  E8 0376			      call  set_char
 014F  B2 54			      mov   dl, 'T'
 0151  E8 0371			      call  set_char
 0154  B2 3B			      mov   dl, 3bh
 0156  E8 036C			      call  set_char
 0159  B2 43			      mov   dl, 'C'
 015B  E8 0367			      call  set_char
 015E  B2 2B			      mov   dl, 2bh
 0160  E8 0362			      call  set_char
 0163  B2 47			      mov   dl, 'G'
 0165  E8 035D			      call  set_char
 0168				   start_count:   
 0168  8D 1E 046E R		      lea     bx, loading
 016C  E8 0340			      call    printf_s
 016F  8D 1E 01F4 R		      lea     bx, file_size
 0173  8B 0F			      mov     cx, [bx]
 0175  8D 1E 04AC R		      lea     bx, group_size
 0179  2B 0F			      sub     cx, [bx]
 017B  7D 03 E9 0294		      jl      file_less_than_group
 0180  89 0E 0206 R		      mov     position, cx
 0184  FF 0E 0212 R		      dec     cur_position
 0188  FF 06 0206 R		      inc     position
 018C				   count_bases:
 018C  FF 06 0212 R		      inc     cur_position
 0190  8B 1E 047B R		      mov     bx, file_handle_dst
 0194  8B 0E 0212 R		      mov     cx, cur_position
 0198  3B 0E 0206 R		      cmp     cx, position
 019C  75 03 E9 0214		      je      close_and_final
 01A1  B2 2E			      mov     dl, 2eh
 01A3  E8 031A			      call    printf_c
 01A6  B2 0D			      mov     dl, CR
 01A8  E8 031A			      call    set_char
 01AB  B2 0A			      mov     dl, LF
 01AD  E8 0315			      call    set_char
 01B0  8D 36 01EE R		      lea     si, s_nitrogen_bases
 01B4  C7 06 01FD R 0000	      mov     base_a, 0
 01BA  C7 06 01FF R 0000	      mov     base_c, 0
 01C0  C7 06 0201 R 0000	      mov     base_t, 0
 01C6  C7 06 0203 R 0000	      mov     base_g, 0
 01CC  8D 1E 04AC R		      lea     bx, group_size
 01D0  8B 0F			      mov     cx, [bx]
 01D2  51			      push    cx
 01D3  8B 1E 0479 R		      mov     bx, file_handle
 01D7  B4 42			      mov     ah, 42h
 01D9  2B C9			      sub     cx, cx
 01DB  8B 16 0212 R		      mov     dx, cur_position ; CX:DX=+7
 01DF  B0 00			      mov     al, 0h  ; from beginning
 01E1  CD 21			      int     21h
 01E3  E8 0296			      call    get_char
 01E6  80 FA 0A			      cmp     dl, 0ah
 01E9  74 0F			      je      cr_case
 01EB  B4 42			      mov     ah, 42h
 01ED  2B C9			      sub     cx, cx
 01EF  8B 16 0212 R		      mov     dx, cur_position ; CX:DX=+7
 01F3  B0 00			      mov     al, 0h  ; from beginning
 01F5  CD 21			      int     21h
 01F7  59			      pop     cx
 01F8  EB 0D			      jmp     count_bases_loop

 01FA				      cr_case:
 01FA  59			         pop     cx
 01FB  FF 06 0206 R		         inc     position
 01FF  FF 06 0212 R		         inc     cur_position
 0203  FF 06 01FB R		         inc     base_lines

 0207				      count_bases_loop:
 0207  83 F9 00			         cmp     cx, 0
 020A  74 59			         je      set_count_bases

 020C  51			         push    cx
 020D  E8 026C			         call    get_char
 0210  73 03 E9 0176		         jc      error_read_file
 0215  80 FA 00			         cmp     dl, 0
 0218  75 03 E9 0198		         jz      close_and_final
 021D  8A C2			         mov     al, dl
				         ; Check for 'A', 'C', 'T', 'G' and update counters
 021F  3C 41			         cmp     al, 'A'
 0221  74 10			         je      increment_a
 0223  3C 43			         cmp     al, 'C'
 0225  74 14			         je      increment_c
 0227  3C 54			         cmp     al, 'T'
 0229  74 18			         je      increment_t
 022B  3C 47			         cmp     al, 'G'
 022D  74 1C			         je      increment_g
 022F  3C 0A			         cmp     al, 0ah
 0231  74 20			         je      else_count_bases_loop
				         
 0233				         increment_a:
 0233  59			            pop     cx
 0234  FF 06 01FD R		            inc     base_a
 0238  49			            dec     cx
 0239  EB CC			            jmp     count_bases_loop

 023B				         increment_c:
 023B  59			            pop     cx
 023C  FF 06 01FF R		            inc     base_c
 0240  49			            dec     cx
 0241  EB C4			            jmp     count_bases_loop

 0243				         increment_t:
 0243  59			            pop     cx
 0244  FF 06 0201 R		            inc     base_t
 0248  49			            dec     cx
 0249  EB BC			            jmp     count_bases_loop

 024B				         increment_g:
 024B  59			            pop     cx
 024C  FF 06 0203 R		            inc     base_g
 0250  49			            dec     cx
 0251  EB B4			            jmp     count_bases_loop
				         
 0253				         else_count_bases_loop:
 0253  59			            pop     cx
 0254  EB B1			            jmp     count_bases_loop

 0256				         error_unknown_char:
 0256  8D 1E 043E R		            lea   bx, error_unknown_char_msg
 025A  E8 0252			            call  printf_s
 025D  C6 06 029A R 01		            mov   flag_error, 1
 0262  E9 0150			            jmp   close_and_final

 0265				         set_count_bases:
 0265  80 3C 00			            cmp   byte ptr [si], 0
 0268  75 03 E9 FF1F		            je    count_bases 
 026D  80 3C 61			            cmp   byte ptr [si], 'a'
 0270  74 1D			            je    set_count_a
 0272  80 3C 63			            cmp   byte ptr [si], 'c'
 0275  74 3F			            je    set_count_c
 0277  80 3C 74			            cmp   byte ptr [si], 't'
 027A  74 61			            je    set_count_t
 027C  80 3C 67			            cmp   byte ptr [si], 'g'
 027F  75 03 E9 0081		            je    set_count_g
 0284  80 3C 2B			            cmp   byte ptr [si], '+'
 0287  75 03 E9 00A1		            je    set_count_plus
 028C  E9 FEFD			            jmp   count_bases
				            ; put base_a in its location in file
 028F				            set_count_a:
 028F  A1 01FD R		               mov   ax, base_a
 0292  8D 1E 0483 R		               lea   bx, base_a_str
 0296  E8 018B			               call  sprintf_w
 0299  8B 1E 047B R		               mov   bx, file_handle_dst
 029D  8D 3E 0483 R		               lea   di, base_a_str
 02A1				               set_count_a_loop:
 02A1  8A 15			                  mov   dl, [di]
 02A3  80 FA 00			                  cmp   dl, 0
 02A6  74 06			                  je    end_set_count_a_loop
 02A8  E8 021A			                  call  set_char
 02AB  47			                  inc   di
 02AC  EB F3			                  jmp   set_count_a_loop
 02AE				               end_set_count_a_loop:
 02AE  B2 3B			                  mov   dl, 3bh
 02B0  E8 0212			                  call  set_char
 02B3  46			                  inc   si
 02B4  EB AF			                  jmp   set_count_bases
 02B6				            set_count_c:
 02B6  A1 01FF R		               mov   ax, base_c
 02B9  8D 1E 0489 R		               lea   bx, base_c_str
 02BD  E8 0164			               call  sprintf_w
 02C0  8B 1E 047B R		               mov   bx, file_handle_dst
 02C4  8D 3E 0489 R		               lea   di, base_c_str
 02C8				               set_count_c_loop:
 02C8  8A 15			                  mov   dl, [di]
 02CA  80 FA 00			                  cmp   dl, 0
 02CD  74 06			                  je    end_set_count_c_loop
 02CF  E8 01F3			                  call  set_char
 02D2  47			                  inc   di
 02D3  EB F3			                  jmp   set_count_c_loop
 02D5				               end_set_count_c_loop:
 02D5  B2 3B			                  mov   dl, 3bh
 02D7  E8 01EB			                  call  set_char
 02DA  46			                  inc   si
 02DB  EB 88			                  jmp   set_count_bases
 02DD				            set_count_t:
 02DD  A1 0201 R		               mov   ax, base_t
 02E0  8D 1E 048F R		               lea   bx, base_t_str
 02E4  E8 013D			               call  sprintf_w
 02E7  8B 1E 047B R		               mov   bx, file_handle_dst
 02EB  8D 3E 048F R		               lea   di, base_t_str
 02EF				               set_count_t_loop:
 02EF  8A 15			                  mov   dl, [di]
 02F1  80 FA 00			                  cmp   dl, 0
 02F4  74 06			                  je    end_set_count_t_loop
 02F6  E8 01CC			                  call  set_char
 02F9  47			                  inc   di
 02FA  EB F3			                  jmp   set_count_t_loop
 02FC				               end_set_count_t_loop:
 02FC  B2 3B			                  mov   dl, 3bh
 02FE  E8 01C4			                  call  set_char
 0301  46			                  inc   si
 0302  E9 FF60			                  jmp   set_count_bases
 0305				            set_count_g:
 0305  A1 0203 R		               mov   ax, base_g
 0308  8D 1E 0495 R		               lea   bx, base_g_str
 030C  E8 0115			               call  sprintf_w
 030F  8B 1E 047B R		               mov   bx, file_handle_dst
 0313  8D 3E 0495 R		               lea   di, base_g_str
 0317				               set_count_g_loop:
 0317  8A 15			                  mov   dl, [di]
 0319  80 FA 00			                  cmp   dl, 0
 031C  74 06			                  je    end_set_count_g_loop
 031E  E8 01A4			                  call  set_char
 0321  47			                  inc   di
 0322  EB F3			                  jmp   set_count_g_loop
 0324				               end_set_count_g_loop:
 0324  B2 3B			                  mov   dl, 3bh
 0326  E8 019C			                  call  set_char
 0329  46			                  inc   si
 032A  E9 FF38			                  jmp   set_count_bases
 032D				            set_count_plus:
 032D  A1 01FD R		                  mov   ax, base_a
 0330  03 06 0201 R		                  add   ax, base_t
 0334  8D 1E 049B R		                  lea   bx, base_at_str
 0338  E8 00E9			                  call  sprintf_w
 033B  8B 1E 047B R		                  mov   bx, file_handle_dst
 033F  8D 3E 049B R		                  lea   di, base_at_str
 0343				               set_count_at_loop:
 0343  8A 15			                  mov   dl, [di]
 0345  80 FA 00			                  cmp   dl, 0
 0348  74 06			                  je    end_set_count_at_loop
 034A  E8 0178			                  call  set_char
 034D  47			                  inc   di
 034E  EB F3			                  jmp   set_count_at_loop
 0350				               end_set_count_at_loop:
 0350  B2 3B			                  mov   dl, 3bh
 0352  E8 0170			                  call  set_char
 0355  A1 01FF R		                  mov   ax, base_c
 0358  03 06 0203 R		                  add   ax, base_g
 035C  8D 1E 04A1 R		                  lea   bx, base_cg_str
 0360  E8 00C1			                  call  sprintf_w
 0363  8B 1E 047B R		                  mov   bx, file_handle_dst
 0367  8D 3E 04A1 R		                  lea   di, base_cg_str
 036B				               set_count_cg_loop:
 036B  8A 15			                  mov   dl, [di]
 036D  80 FA 00			                  cmp   dl, 0
 0370  74 06			                  je    end_set_count_plus
 0372  E8 0150			                  call  set_char
 0375  47			                  inc   di
 0376  EB F3			                  jmp   set_count_cg_loop
 0378				               end_set_count_plus:
 0378  46			                  inc   si
 0379  E9 FEE9			                  jmp   set_count_bases

 037C				error_open_file:
 037C  8D 1E 03C7 R		      lea   bx, error_open_file_msg
 0380  E8 012C			      call  printf_s
 0383  C6 06 029A R 01		      mov   flag_error, 1
 0388  E9 0095			      jmp   final

 038B				error_read_file:
 038B  8D 1E 03E6 R		      lea   bx, error_read_file_msg
 038F  E8 011D			      call  printf_s
 0392  C6 06 029A R 01		      mov   flag_error, 1
 0397  EB 1C			      jmp   close_and_final

 0399				error_create_file:
 0399  8D 1E 0404 R		      lea   bx, error_create_file_msg
 039D  E8 010F			      call  printf_s
 03A0  C6 06 029A R 01		      mov   flag_error, 1
 03A5  EB 0E			      jmp   close_and_final

 03A7				error_write_file:
 03A7  8D 1E 0421 R		      lea   bx, error_write_file_msg
 03AB  E8 0101			      call  printf_s
 03AE  C6 06 029A R 01		      mov   flag_error, 1
 03B3  EB 00			      jmp   close_and_final

 03B5				close_and_final:

				   ; Display counts of 'A', 'C', 'T', 'G'
				   ; Após incrementar cada contador (increment_a, increment_c, increment_t, increment_g), converta o valor para string
 03B5  8D 1E 02D8 R		   lea   bx, msg_group_size
 03B9  E8 00F3			   call  printf_s
 03BC  8D 1E 04A7 R		   lea   bx, group_size_str
 03C0  E8 00EC			   call  printf_s
 03C3  8D 1E 029B R		   lea   bx, msg_crlf
 03C7  E8 00E5			   call  printf_s
 03CA  8D 1E 0309 R		   lea   bx, msg_information
 03CE  E8 00DE			   call  printf_s
 03D1  8D 1E 01EE R		   lea   bx, s_nitrogen_bases
 03D5  E8 00D7			   call  printf_s
 03D8  8D 1E 029B R		   lea   bx, msg_crlf
 03DC  E8 00D0			   call  printf_s
 03DF  8D 1E 033D R		   lea   bx, msg_bases_size_input
 03E3  E8 00C9			   call  printf_s
 03E6  8D 1E 01F6 R		   lea   bx, file_size_str
 03EA  E8 00C2			   call  printf_s
 03ED  8D 1E 029B R		   lea   bx, msg_crlf  
 03F1  E8 00BB			   call  printf_s
 03F4  8D 1E 0365 R		   lea   bx, msg_group_count
 03F8  E8 00B4			   call  printf_s
 03FB  A1 0206 R		   mov   ax, position
 03FE  8D 1E 01FB R		   lea   bx, base_lines
 0402  2B 07			   sub   ax, [bx]
 0404  8D 1E 0208 R		   lea   bx, position_str
 0408  E8 0019			   call  sprintf_w
 040B  8D 1E 0208 R		   lea   bx,position_str
 040F  E8 009D			   call  printf_s

 0412  EB 0C			   jmp   final

 0414				   file_less_than_group:
 0414  8D 1E 0421 R		      lea   bx, error_write_file_msg
 0418  E8 0094			      call  printf_s
 041B  C6 06 029A R 01		      mov   flag_error,1

 0420				final:
				      .exit

				;
				; --------------------------------------------------------------------
				; Função: Converte um inteiro (n) para (string)
				;        sprintf(string->BX, "%d", n->AX)
				; --------------------------------------------------------------------
 0424				sprintf_w proc near
 0424  A3 047E R		   mov   sw_n, ax
 0427  B9 0005			   mov   cx, 5
 042A  C7 06 0481 R 2710	   mov   sw_m, 10000
 0430  C6 06 0480 R 00		   mov   sw_f, 0

 0435				sw_do:
 0435  BA 0000			   mov   dx, 0
 0438  A1 047E R		   mov   ax, sw_n
 043B  F7 36 0481 R		   div   sw_m

 043F  3C 00			   cmp   al, 0
 0441  75 07			   jne   sw_store
 0443  80 3E 0480 R 00		   cmp   sw_f, 0
 0448  74 0A			   je    sw_continue
 044A				sw_store:
 044A  04 30			   add   al, '0'
 044C  88 07			   mov   [bx], al
 044E  43			   inc   bx

 044F  C6 06 0480 R 01		   mov   sw_f, 1
 0454				sw_continue:

 0454  89 16 047E R		   mov   sw_n, dx

 0458  BA 0000			   mov   dx, 0
 045B  A1 0481 R		   mov   ax, sw_m
 045E  BD 000A			   mov   bp, 10
 0461  F7 F5			   div   bp
 0463  A3 0481 R		   mov   sw_m, ax

 0466  49			   dec   cx
 0467  83 F9 00			   cmp   cx, 0
 046A  75 C9			   jnz   sw_do

 046C  80 3E 0480 R 00		   cmp   sw_f, 0
 0471  75 05			   jnz   sw_continua2
 0473  C7 07 0030		   mov   [bx], '0'
 0477  43			   inc   bx
 0478				sw_continua2:

 0478  C6 07 00			   mov   byte ptr [bx], 0
 047B  C3			   ret
 047C				sprintf_w endp

				;
				; --------------------------------------------------------------------
				; Função Le um caractere do arquivo identificado pelo HANDLE BX
				; get_char(handle->BX)
				; Entra: BX -> file handle
				; Sai:   DL -> caractere
				; AX -> numero de caracteres lidos
				; CF -> "0" se leitura ok
				; --------------------------------------------------------------------
 047C				get_char proc near
 047C  B4 3F			   mov   ah, 3fh
 047E  B9 0001			   mov   cx, 1
 0481  8D 16 047D R		   lea   dx, file_buffer
 0485  CD 21			   int   21h
 0487  73 03 E9 FEFF		   jc    error_read_file
 048C  8A 16 047D R		   mov   dl, file_buffer
 0490  C3			   ret
 0491				get_char endp

				;
				; --------------------------------------------------------------------
				; Função Abre o arquivo cujo nome está no string apontado por DX
				; boolean fopen(char *FileName -> DX)
				; Entra: DX -> ponteiro para o string com o nome do arquivo
				; Sai:   AX -> handle do arquivo
				; CF -> 0, se OK
				; --------------------------------------------------------------------
 0491				fopen proc near
 0491  B0 00			   mov   al, 0
 0493  B4 3D			   mov   ah, 3dh
 0495  CD 21			   int   21h
 0497  C3			   ret
 0498				fopen endp

				;
				; --------------------------------------------------------------------
				; --------------------------------------------------------------------
 0498				fseek proc near
 0498  8B 1E 0479 R		   mov   bx, file_handle
 049C  B8 4200			   mov   ax, 4200h
 049F  CD 21			   int   21h
 04A1  C3			   ret
 04A2				fseek endp

				;
				; --------------------------------------------------------------------
				; Função Cria o arquivo cujo nome está no string apontado por DX
				; boolean fcreate(char *FileName -> DX)
				; Sai:   AX -> handle do arquivo
				; CF -> 0, se OK
				; --------------------------------------------------------------------
 04A2				fcreate proc near
 04A2  B9 0000			   mov   cx, 0
 04A5  B4 3C			   mov   ah, 3ch
 04A7  CD 21			   int   21h
 04A9  C3			   ret
 04AA				fcreate endp

				;
				; --------------------------------------------------------------------
				; Entra: BX -> file handle
				; Sai: CF -> "0" se OK
				; --------------------------------------------------------------------
 04AA				fclose proc near
 04AA  B4 3E			   mov   ah, 3eh
 04AC  CD 21			   int   21h
 04AE  C3			   ret
 04AF				fclose endp

				;
				; --------------------------------------------------------------------
				; Função Escrever um string na tela
				; printf_s(char *s -> BX)
				; --------------------------------------------------------------------
 04AF				printf_s proc near
 04AF  8A 17			   mov   dl, [bx]
 04B1  80 FA 00			   cmp   dl, 0
 04B4  74 09			   je    ps_1

 04B6  53			   push  bx
 04B7  B4 02			   mov   ah, 2
 04B9  CD 21			   int   21h
 04BB  5B			   pop   bx

 04BC  43			   inc   bx
 04BD  EB F0			   jmp   printf_s

 04BF				ps_1:
 04BF  C3			   ret
 04C0				printf_s endp

				;
				; --------------------------------------------------------------------
				; Função Escrever um char na tela
				; Entra: DL -> Char a ser escrito
				; --------------------------------------------------------------------
 04C0				printf_c proc near
 04C0  B4 02			   mov   ah, 2
 04C2  CD 21			   int   21h
 04C4  C3			   ret
 04C5				printf_c endp

				;
				; --------------------------------------------------------------------
				; Entra: BX -> file handle
				; dl -> caractere
				; Sai: AX -> numero de caracteres escritos
				; CF -> "0" se escrita ok
				; --------------------------------------------------------------------
 04C5				set_char proc near
 04C5  B4 40			   mov   ah, 40h
 04C7  B9 0001			   mov   cx, 1
 04CA  88 16 047D R		   mov   file_buffer, dl
 04CE  8D 16 047D R		   lea   dx, file_buffer
 04D2  CD 21			   int   21h
 04D4  C3			   ret
 04D5				set_char endp

				;
				; --------------------------------------------------------------------
				; Função: Converte um ASCII-DECIMAL para HEXA
				; Entra: (S) -> DS:BX -> Ponteiro para o string de origem
				; Sai: (A) -> AX -> Valor "Hex" resultante
				; Algoritmo:
				; A = 0;
				; while (*S!='\0') {
				; A = 10 * A + (*S - '0')
				; ++S;
				; }
				; return
				; --------------------------------------------------------------------
 04D5				atoi proc near

				   ; A = 0;
 04D5  B8 0000			   mov ax, 0

 04D8				   atoi_2:
				   ; while (*S!='\0') {
 04D8  80 3F 00			   cmp byte ptr [bx], 0
 04DB  74 11			   jz atoi_1

				   ; A = 10 * A
 04DD  B9 000A			   mov cx, 10
 04E0  F7 E1			   mul cx

				   ; A = A + *S
 04E2  B5 00			   mov ch, 0
 04E4  8A 0F			   mov cl, [bx]
 04E6  03 C1			   add ax, cx

				   ; A = A - '0'
 04E8  83 E8 30			   sub ax, '0'

				   ; ++S
 04EB  43			   inc bx

				   ;}
 04EC  EB EA			   jmp atoi_2

 04EE				   atoi_1:
				   ; return
 04EE  C3			   ret

 04EF				atoi endp

				;
				; --------------------------------------------------------------------
				; Parse commandline in arguments
				; --------------------------------------------------------------------
 04EF				get_commandline proc near
 04EF  83 F9 00			   cmp cx, 0
 04F2  75 03			   jnz parse_command_line          ; YES - PROCESS COMMAND LINE PARAMETERS
 04F4  E9 012A			   jmp no_arguments           ; NO - PARAMETERS

 04F7				parse_command_line:
 04F7				   skip_space:
 04F7  26: 8A 04		      mov al, es:[si]
 04FA  3C 20			      cmp al, ' '
 04FC  74 0A			      je next_option
 04FE  3C 0D			      cmp al, CR
 0500  75 03 E9 011C		      je no_arguments
 0505  46			      inc si
 0506  EB EF			      jmp skip_space

 0508				   next_option:
 0508  46			      inc si
 0509  26: 8A 04		      mov al, es:[si]

				      ; Verificar se encontramos uma opção válida
 050C  3C 2D			      cmp al, '-'
 050E  74 03 E9 00BE		      jne invalid_option

				      ; Move string pointer
 0513  46			      inc si
 0514  26: 8A 04		      mov al, es:[si]
 0517  3C 0D			      cmp al, CR
 0519  75 03 E9 00B3		      je invalid_option
 051E  3C 66			      cmp al, 'f'
 0520  74 0A			      je f_option
 0522  3C 6F			      cmp al, 'o'
 0524  74 26			      je o_option
 0526  3C 6E			      cmp al, 'n'
 0528  74 42			      je n_option
 052A  EB 6F			      jmp base_option

 052C				   f_option:
 052C  8D 3E 017F R		      lea di, input_file
 0530  46			      inc si
 0531  26: 8A 04		      mov al, es:[si]
 0534  3C 20			      cmp al, ' '
 0536  74 03 E9 00A6		      jne invalid_option_f
 053B				      f_option_loop:
 053B  46			         inc si
 053C  26: 8A 04		         mov al, es:[si]
 053F  3C 20			         cmp al, ' '
 0541  74 B4			         je skip_space
 0543  3C 0D			         cmp al, CR
 0545  74 B0			         je skip_space
 0547  88 05			         mov [di], al
 0549  47			         inc di
 054A  EB EF			         jmp f_option_loop

 054C				   o_option:
 054C  8D 3E 01B1 R		      lea di, output_file
 0550  46			      inc si
 0551  26: 8A 04		      mov al, es:[si]
 0554  3C 20			      cmp al, ' '
 0556  74 03 E9 0096		      jne invalid_option_o
 055B				      o_option_loop:
 055B  46			         inc si
 055C  26: 8A 04		         mov al, es:[si]
 055F  3C 20			         cmp al, ' '
 0561  74 94			         je skip_space
 0563  3C 0D			         cmp al, CR
 0565  74 90			         je skip_space
 0567  88 05			         mov [di], al
 0569  47			         inc di
 056A  EB EF			         jmp o_option_loop

 056C				   n_option:
 056C  8D 3E 04A7 R		      lea di, group_size_str
 0570  46			      inc si
 0571  26: 8A 04		      mov al, es:[si]
 0574  3C 20			      cmp al, ' '
 0576  74 03 E9 0086		      jne invalid_option_n
 057B				      n_option_loop:
 057B  46			         inc si
 057C  26: 8A 04		         mov al, es:[si]
 057F  3C 20			         cmp al, ' '
 0581  74 11			         je end_n_option
 0583  3C 0D			         cmp al, CR
 0585  74 0D			         je end_n_option
 0587  3C 39			         cmp al, 39h
 0589  7F 76			         jg invalid_option_n
 058B  3C 30			         cmp al, 30h
 058D  7C 72			         jl invalid_option_n
 058F  88 05			         mov [di], al
 0591  47			         inc di
 0592  EB E7			         jmp n_option_loop
 0594				      end_n_option:
 0594  C7 05 0000		         mov      [di], 0
 0598  E9 FF5C			         jmp      skip_space

 059B				   base_option:
 059B  8D 3E 021E R		      lea di, base_valid    ; di = base_valid initial adress
 059F  8D 1E 01E9 R		      lea bx, nitrogen_bases
 05A3  3C 20			      cmp al, ' '           ; if space invalid
 05A5  74 6A			      je invalid_option_a
 05A7  3C 0D			      cmp al, CR            ; if cr invalid
 05A9  74 66			      je invalid_option_a
 05AB				   base_check_loop:
 05AB  8D 3E 021E R		      lea di, base_valid    ; di = base_valid initial adress
 05AF  26: 8A 04		      mov al, es:[si]       ; al = cmdline char
 05B2  3C 20			      cmp al, ' '           ; if space base_cmd ended
 05B4  74 18			      je done_parsing_base
 05B6  3C 0D			      cmp al, CR            ; if cr base_cmd ended
 05B8  74 14			      je done_parsing_base
 05BA				   base_valid_loop:
 05BA  80 3D 00			      cmp byte ptr [di], 0
 05BD  74 52			      je invalid_option_a
 05BF  8A 0D			      mov cl, [di]
 05C1  38 C1			      cmp cl, al
 05C3  74 03			      je valid_base
 05C5  47			      inc di
 05C6  EB F2			      jmp base_valid_loop

 05C8				valid_base:
 05C8  88 07			      mov [bx], al
 05CA  43			      inc bx
 05CB  46			      inc si
 05CC  EB DD			      jmp base_check_loop

 05CE				done_parsing_base:
 05CE  E9 FF26			      jmp      skip_space

 05D1				invalid_option:
 05D1  8D 1E 0224 R		      lea bx, error_command_line
 05D5  E8 FED7			      call printf_s
 05D8  C6 06 029A R 01		      mov flag_error, 1
				      .exit
 05E1				invalid_option_f:
 05E1  8D 1E 023F R		      lea bx, error_command_line_f
 05E5  E8 FEC7			      call printf_s
 05E8  C6 06 029A R 01		      mov flag_error, 1
				      .exit
 05F1				invalid_option_o:
 05F1  8D 1E 0255 R		      lea bx, error_command_line_o
 05F5  E8 FEB7			      call printf_s
 05F8  C6 06 029A R 01		      mov flag_error, 1
				      .exit
 0601				invalid_option_n:
 0601  8D 1E 026B R		      lea bx, error_command_line_n
 0605  E8 FEA7			      call printf_s
 0608  C6 06 029A R 01		      mov flag_error, 1
				      .exit
 0611				invalid_option_a:
 0611  8D 1E 026B R		      lea bx, error_command_line_n
 0615  E8 FE97			      call printf_s
 0618  C6 06 029A R 01		      mov flag_error, 1
				      .exit

 0621				no_arguments:
 0621  8D 1E 04A7 R		      lea      bx, group_size_str
 0625  E8 FEAD			      call     atoi
 0628  8D 1E 04AC R		      lea      bx, group_size
 062C  89 07			      mov      [bx], ax
 062E  83 F8 00			      cmp      ax, 0
 0631  74 9E			      je       invalid_option
 0633  C3			      ret
 0634				get_commandline endp

				;
				; --------------------------------------------------------------------
				; Sort nitrogen bases command line parameter
				; --------------------------------------------------------------------
 0634				sort_nitrogen_bases  proc  near

 0634  8D 3E 01E9 R		      lea   di,nitrogen_bases
 0638  8D 36 01EE R		      lea   si,s_nitrogen_bases
 063C				   s_loop_a:
 063C  8A 15			      mov   dl, [di]
 063E  80 FA 00			      cmp   dl, 0
 0641  74 0D			      je    end_put_a
 0643  80 FA 61			      cmp   dl, 'a'
 0646  74 03			      je    s_put_a
 0648  47			      inc   di
 0649  EB F1			      jmp   s_loop_a
 064B				   s_put_a:
 064B  C7 04 0061		      mov   [si],'a'
 064F  46			      inc   si 
 0650				   end_put_a:
 0650  8D 3E 01E9 R		      lea   di,nitrogen_bases
 0654				   s_loop_t:
 0654  8A 15			      mov   dl, [di]
 0656  80 FA 00			      cmp   dl, 0
 0659  74 0D			      je    end_put_t
 065B  80 FA 74			      cmp   dl, 't'
 065E  74 03			      je    s_put_t
 0660  47			      inc   di
 0661  EB F1			      jmp   s_loop_t
 0663				   s_put_t:
 0663  C7 04 0074		      mov   [si],'t'
 0667  46			      inc   si
 0668				   end_put_t:
 0668  8D 3E 01E9 R		      lea   di,nitrogen_bases
 066C				   s_loop_c:
 066C  8A 15			      mov   dl, [di]
 066E  80 FA 00			      cmp   dl, 0
 0671  74 0D			      je    end_put_c
 0673  80 FA 63			      cmp   dl, 'c'
 0676  74 03			      je    s_put_c
 0678  47			      inc   di
 0679  EB F1			      jmp   s_loop_c
 067B				   s_put_c:
 067B  C7 04 0063		      mov   [si],'c'
 067F  46			      inc   si
 0680				   end_put_c:
 0680  8D 3E 01E9 R		      lea   di,nitrogen_bases
 0684				   s_loop_g:
 0684  8A 15			      mov   dl, [di]
 0686  80 FA 00			      cmp   dl, 0
 0689  74 0D			      je    end_put_g
 068B  80 FA 67			      cmp   dl, 'g'
 068E  74 03			      je    s_put_g
 0690  47			      inc   di
 0691  EB F1			      jmp   s_loop_g
 0693				   s_put_g:
 0693  C7 04 0067		      mov   [si],'g'
 0697  46			      inc   si
 0698				   end_put_g:
 0698  8D 3E 01E9 R		      lea   di, nitrogen_bases
 069C				   s_loop_plus:
 069C  8A 15			      mov   dl, [di]
 069E  80 FA 00			      cmp   dl, 0
 06A1  74 0C			      je    s_ret
 06A3  80 FA 2B			      cmp   dl, '+'
 06A6  74 03			      je    s_put_plus
 06A8  47			      inc   di
 06A9  EB F1			      jmp   s_loop_plus
 06AB				   s_put_plus:
 06AB  C7 04 002B		      mov   [si],'+'
 06AF				   s_ret:
 06AF  C3			      ret
 06B0				sort_nitrogen_bases endp


				; Função para calcular o tamanho de caracteres no arquivo lido
				; Entrada: BX -> file handle
				; Saída: DX:AX -> tamanho do arquivo em caracteres

 06B0				calculate_file_size proc near
 06B0  33 C0			   xor ax, ax        ; Inicialize AX com 0
 06B2  33 C9			   xor cx, cx        ; Inicialize CX com 0 para usar como contador

 06B4				cfs_read_loop:
 06B4  8B 1E 0479 R		   mov   bx, file_handle
 06B8  E8 FDC1			   call  get_char
 06BB  73 03 E9 FCCB		   jc    error_read_file
 06C0  83 F8 00			   cmp   ax, 0
 06C3  74 27			   jz    end_of_file
 06C5  80 FA 41			   cmp   dl, 'A'
 06C8  74 1C			   je    inc_file_size
 06CA  80 FA 47			   cmp   dl, 'G'
 06CD  74 17			   je    inc_file_size
 06CF  80 FA 43			   cmp   dl, 'C'
 06D2  74 12			   je    inc_file_size
 06D4  80 FA 54			   cmp   dl, 'T'
 06D7  74 0D			   je    inc_file_size
 06D9  80 FA 0D			   cmp   dl, CR
 06DC  74 0C			   je    loop_file_size
 06DE  80 FA 0A			   cmp   dl, LF
 06E1  74 07			   je    loop_file_size
 06E3  E9 FB70			   jmp   error_unknown_char
 06E6				   inc_file_size:
 06E6  FF 06 01F4 R		   inc   file_size
 06EA				   loop_file_size:
 06EA  EB C8			   jmp   cfs_read_loop

 06EC				end_of_file:
 06EC  C3			   ret
 06ED				calculate_file_size endp

				; --------------------------------------------------------------------
				; Print a formatted message with a carriage return and line feed
				; --------------------------------------------------------------------
 06ED				printf_crlf proc near
 06ED  8D 1E 029B R		   lea bx, msg_crlf
 06F1  E8 FDBB			   call printf_s
 06F4  C3			   ret
 06F5				printf_crlf endp

				; --------------------------------------------------------------------
				; Print a formatted message with a line feed
				; --------------------------------------------------------------------
 06F5				printf_lf proc near
 06F5  BB 000A			   mov bx, LF
 06F8  E8 FDB4			   call printf_s
 06FB  C3			   ret
 06FC				printf_lf endp

				; --------------------------------------------------------------------
				; Print a formatted message with a carriage return
				; --------------------------------------------------------------------
 06FC				printf_cr proc near
 06FC  BB 000D			   mov bx, CR
 06FF  E8 FDAD			   call printf_s
 0702  C3			   ret
 0703				printf_cr endp

				; --------------------------------------------------------------------
				; Print a formatted message followed by a carriage return and line feed
				; --------------------------------------------------------------------
 0703				printf_crlf_s proc near
 0703  E8 FDA9			   call printf_s
 0706  E8 FFE4			   call printf_crlf
 0709  C3			   ret
 070A				printf_crlf_s endp

				; --------------------------------------------------------------------
				; Function: Clear the command line buffer
				; --------------------------------------------------------------------
 070A				clear_cmdline_buffer proc near
 070A  BF 0100 R		   mov di, offset cmdline
 070D  B9 0080			   mov cx, 128
 0710  32 C0			   xor al, al
 0712  F3/ AA			   rep stosb
 0714  C3			   ret
 0715				clear_cmdline_buffer endp

				end

Microsoft (R) Macro Assembler Version 6.11		    09/13/23 24:53:08
trabalho.asm						     Symbols 2 - 1




Segments and Groups:

                N a m e                 Size     Length   Align   Combine Class

DGROUP . . . . . . . . . . . . .	GROUP
_DATA  . . . . . . . . . . . . .	16 Bit	 04AD	  Word	  Public  'DATA'	
STACK  . . . . . . . . . . . . .	16 Bit	 0400	  Para	  Stack	  'STACK'	 
_TEXT  . . . . . . . . . . . . .	16 Bit	 0715	  Word	  Public  'CODE'	


Procedures,  parameters and locals:

                N a m e                 Type     Value    Attr

atoi . . . . . . . . . . . . . .	P Near	 04D5	  _TEXT	Length= 001A Private
calculate_file_size  . . . . . .	P Near	 06B0	  _TEXT	Length= 003D Private
clear_cmdline_buffer . . . . . .	P Near	 070A	  _TEXT	Length= 000B Private
fclose . . . . . . . . . . . . .	P Near	 04AA	  _TEXT	Length= 0005 Private
fcreate  . . . . . . . . . . . .	P Near	 04A2	  _TEXT	Length= 0008 Private
fopen  . . . . . . . . . . . . .	P Near	 0491	  _TEXT	Length= 0007 Private
fseek  . . . . . . . . . . . . .	P Near	 0498	  _TEXT	Length= 000A Private
get_char . . . . . . . . . . . .	P Near	 047C	  _TEXT	Length= 0015 Private
get_commandline  . . . . . . . .	P Near	 04EF	  _TEXT	Length= 0145 Private
printf_crlf_s  . . . . . . . . .	P Near	 0703	  _TEXT	Length= 0007 Private
printf_crlf  . . . . . . . . . .	P Near	 06ED	  _TEXT	Length= 0008 Private
printf_cr  . . . . . . . . . . .	P Near	 06FC	  _TEXT	Length= 0007 Private
printf_c . . . . . . . . . . . .	P Near	 04C0	  _TEXT	Length= 0005 Private
printf_lf  . . . . . . . . . . .	P Near	 06F5	  _TEXT	Length= 0007 Private
printf_s . . . . . . . . . . . .	P Near	 04AF	  _TEXT	Length= 0011 Private
set_char . . . . . . . . . . . .	P Near	 04C5	  _TEXT	Length= 0010 Private
sort_nitrogen_bases  . . . . . .	P Near	 0634	  _TEXT	Length= 007C Private
sprintf_w  . . . . . . . . . . .	P Near	 0424	  _TEXT	Length= 0058 Private


Symbols:

                N a m e                 Type     Value    Attr

@CodeSize  . . . . . . . . . . .	Number	 0000h	 
@DataSize  . . . . . . . . . . .	Number	 0000h	 
@Interface . . . . . . . . . . .	Number	 0000h	 
@Model . . . . . . . . . . . . .	Number	 0002h	 
@Startup . . . . . . . . . . . .	L Near	 0000	  _TEXT	
@code  . . . . . . . . . . . . .	Text   	 _TEXT
@data  . . . . . . . . . . . . .	Text   	 DGROUP
@fardata?  . . . . . . . . . . .	Text   	 FAR_BSS
@fardata . . . . . . . . . . . .	Text   	 FAR_DATA
@stack . . . . . . . . . . . . .	Text   	 DGROUP
CMDCNT . . . . . . . . . . . . .	Byte	 0080	  _DATA	
CMDSTR . . . . . . . . . . . . .	Byte	 0081	  _DATA	
CR . . . . . . . . . . . . . . .	Number	 000Dh	 
LF . . . . . . . . . . . . . . .	Number	 000Ah	 
atoi_1 . . . . . . . . . . . . .	L Near	 04EE	  _TEXT	
atoi_2 . . . . . . . . . . . . .	L Near	 04D8	  _TEXT	
base_a_str . . . . . . . . . . .	Byte	 0483	  _DATA	
base_at_str  . . . . . . . . . .	Byte	 049B	  _DATA	
base_a . . . . . . . . . . . . .	Word	 01FD	  _DATA	
base_c_str . . . . . . . . . . .	Byte	 0489	  _DATA	
base_cg_str  . . . . . . . . . .	Byte	 04A1	  _DATA	
base_check_loop  . . . . . . . .	L Near	 05AB	  _TEXT	
base_c . . . . . . . . . . . . .	Word	 01FF	  _DATA	
base_g_str . . . . . . . . . . .	Byte	 0495	  _DATA	
base_g . . . . . . . . . . . . .	Word	 0203	  _DATA	
base_lines . . . . . . . . . . .	Word	 01FB	  _DATA	
base_option  . . . . . . . . . .	L Near	 059B	  _TEXT	
base_plus  . . . . . . . . . . .	Byte	 0205	  _DATA	
base_t_str . . . . . . . . . . .	Byte	 048F	  _DATA	
base_t . . . . . . . . . . . . .	Word	 0201	  _DATA	
base_valid_loop  . . . . . . . .	L Near	 05BA	  _TEXT	
base_valid . . . . . . . . . . .	Byte	 021E	  _DATA	
cfs_read_loop  . . . . . . . . .	L Near	 06B4	  _TEXT	
close_and_final  . . . . . . . .	L Near	 03B5	  _TEXT	
cmd_output_file  . . . . . . . .	L Near	 0098	  _TEXT	
cmdline  . . . . . . . . . . . .	Byte	 0100	  _DATA	
count_bases_loop . . . . . . . .	L Near	 0207	  _TEXT	
count_bases  . . . . . . . . . .	L Near	 018C	  _TEXT	
cr_case  . . . . . . . . . . . .	L Near	 01FA	  _TEXT	
cur_position_str . . . . . . . .	Word	 0214	  _DATA	
cur_position . . . . . . . . . .	Word	 0212	  _DATA	
default_file . . . . . . . . . .	L Near	 006E	  _TEXT	
default_output_file  . . . . . .	Byte	 01E3	  _DATA	
done_parsing_base  . . . . . . .	L Near	 05CE	  _TEXT	
else_count_bases_loop  . . . . .	L Near	 0253	  _TEXT	
end_n_option . . . . . . . . . .	L Near	 0594	  _TEXT	
end_of_file  . . . . . . . . . .	L Near	 06EC	  _TEXT	
end_put_a  . . . . . . . . . . .	L Near	 0650	  _TEXT	
end_put_c  . . . . . . . . . . .	L Near	 0680	  _TEXT	
end_put_g  . . . . . . . . . . .	L Near	 0698	  _TEXT	
end_put_t  . . . . . . . . . . .	L Near	 0668	  _TEXT	
end_set_count_a_loop . . . . . .	L Near	 02AE	  _TEXT	
end_set_count_at_loop  . . . . .	L Near	 0350	  _TEXT	
end_set_count_c_loop . . . . . .	L Near	 02D5	  _TEXT	
end_set_count_g_loop . . . . . .	L Near	 0324	  _TEXT	
end_set_count_plus . . . . . . .	L Near	 0378	  _TEXT	
end_set_count_t_loop . . . . . .	L Near	 02FC	  _TEXT	
error_command_line_a . . . . . .	Byte	 0281	  _DATA	
error_command_line_f . . . . . .	Byte	 023F	  _DATA	
error_command_line_n . . . . . .	Byte	 026B	  _DATA	
error_command_line_o . . . . . .	Byte	 0255	  _DATA	
error_command_line . . . . . . .	Byte	 0224	  _DATA	
error_create_file_msg  . . . . .	Byte	 0404	  _DATA	
error_create_file  . . . . . . .	L Near	 0399	  _TEXT	
error_open_file_msg  . . . . . .	Byte	 03C7	  _DATA	
error_open_file  . . . . . . . .	L Near	 037C	  _TEXT	
error_read_file_msg  . . . . . .	Byte	 03E6	  _DATA	
error_read_file  . . . . . . . .	L Near	 038B	  _TEXT	
error_unknown_char_msg . . . . .	Byte	 043E	  _DATA	
error_unknown_char . . . . . . .	L Near	 0256	  _TEXT	
error_write_file_msg . . . . . .	Byte	 0421	  _DATA	
error_write_file . . . . . . . .	L Near	 03A7	  _TEXT	
f_option_loop  . . . . . . . . .	L Near	 053B	  _TEXT	
f_option . . . . . . . . . . . .	L Near	 052C	  _TEXT	
file_buffer  . . . . . . . . . .	Byte	 047D	  _DATA	
file_handle_dst  . . . . . . . .	Word	 047B	  _DATA	
file_handle  . . . . . . . . . .	Word	 0479	  _DATA	
file_less_than_group . . . . . .	L Near	 0414	  _TEXT	
file_size_str  . . . . . . . . .	Byte	 01F6	  _DATA	
file_size  . . . . . . . . . . .	Word	 01F4	  _DATA	
final  . . . . . . . . . . . . .	L Near	 0420	  _TEXT	
flag_error . . . . . . . . . . .	Byte	 029A	  _DATA	
group_size_str . . . . . . . . .	Byte	 04A7	  _DATA	
group_size . . . . . . . . . . .	Byte	 04AC	  _DATA	
inc_file_size  . . . . . . . . .	L Near	 06E6	  _TEXT	
increment_a  . . . . . . . . . .	L Near	 0233	  _TEXT	
increment_c  . . . . . . . . . .	L Near	 023B	  _TEXT	
increment_g  . . . . . . . . . .	L Near	 024B	  _TEXT	
increment_t  . . . . . . . . . .	L Near	 0243	  _TEXT	
input_file . . . . . . . . . . .	Byte	 017F	  _DATA	
invalid_option_a . . . . . . . .	L Near	 0611	  _TEXT	
invalid_option_f . . . . . . . .	L Near	 05E1	  _TEXT	
invalid_option_n . . . . . . . .	L Near	 0601	  _TEXT	
invalid_option_o . . . . . . . .	L Near	 05F1	  _TEXT	
invalid_option . . . . . . . . .	L Near	 05D1	  _TEXT	
loading  . . . . . . . . . . . .	Byte	 046E	  _DATA	
loop_file_size . . . . . . . . .	L Near	 06EA	  _TEXT	
loop_read_file . . . . . . . . .	L Near	 00C2	  _TEXT	
msg_bases_size_input . . . . . .	Byte	 033D	  _DATA	
msg_crlf . . . . . . . . . . . .	Byte	 029B	  _DATA	
msg_group_count  . . . . . . . .	Byte	 0365	  _DATA	
msg_group_size . . . . . . . . .	Byte	 02D8	  _DATA	
msg_information  . . . . . . . .	Byte	 0309	  _DATA	
msg_input_file . . . . . . . . .	Byte	 029E	  _DATA	
msg_lines_input_file . . . . . .	Byte	 038C	  _DATA	
msg_output_file  . . . . . . . .	Byte	 02BC	  _DATA	
n_option_loop  . . . . . . . . .	L Near	 057B	  _TEXT	
n_option . . . . . . . . . . . .	L Near	 056C	  _TEXT	
next_option  . . . . . . . . . .	L Near	 0508	  _TEXT	
nitrogen_bases . . . . . . . . .	Byte	 01E9	  _DATA	
no_arguments . . . . . . . . . .	L Near	 0621	  _TEXT	
o_option_loop  . . . . . . . . .	L Near	 055B	  _TEXT	
o_option . . . . . . . . . . . .	L Near	 054C	  _TEXT	
output_file  . . . . . . . . . .	Byte	 01B1	  _DATA	
parse_command_line . . . . . . .	L Near	 04F7	  _TEXT	
position_str . . . . . . . . . .	Word	 0208	  _DATA	
position . . . . . . . . . . . .	Word	 0206	  _DATA	
ps_1 . . . . . . . . . . . . . .	L Near	 04BF	  _TEXT	
s_loop_a . . . . . . . . . . . .	L Near	 063C	  _TEXT	
s_loop_c . . . . . . . . . . . .	L Near	 066C	  _TEXT	
s_loop_g . . . . . . . . . . . .	L Near	 0684	  _TEXT	
s_loop_plus  . . . . . . . . . .	L Near	 069C	  _TEXT	
s_loop_t . . . . . . . . . . . .	L Near	 0654	  _TEXT	
s_nitrogen_bases . . . . . . . .	Byte	 01EE	  _DATA	
s_put_a  . . . . . . . . . . . .	L Near	 064B	  _TEXT	
s_put_c  . . . . . . . . . . . .	L Near	 067B	  _TEXT	
s_put_g  . . . . . . . . . . . .	L Near	 0693	  _TEXT	
s_put_plus . . . . . . . . . . .	L Near	 06AB	  _TEXT	
s_put_t  . . . . . . . . . . . .	L Near	 0663	  _TEXT	
s_ret  . . . . . . . . . . . . .	L Near	 06AF	  _TEXT	
set_count_a_loop . . . . . . . .	L Near	 02A1	  _TEXT	
set_count_at_loop  . . . . . . .	L Near	 0343	  _TEXT	
set_count_a  . . . . . . . . . .	L Near	 028F	  _TEXT	
set_count_bases  . . . . . . . .	L Near	 0265	  _TEXT	
set_count_c_loop . . . . . . . .	L Near	 02C8	  _TEXT	
set_count_cg_loop  . . . . . . .	L Near	 036B	  _TEXT	
set_count_c  . . . . . . . . . .	L Near	 02B6	  _TEXT	
set_count_g_loop . . . . . . . .	L Near	 0317	  _TEXT	
set_count_g  . . . . . . . . . .	L Near	 0305	  _TEXT	
set_count_plus . . . . . . . . .	L Near	 032D	  _TEXT	
set_count_t_loop . . . . . . . .	L Near	 02EF	  _TEXT	
set_count_t  . . . . . . . . . .	L Near	 02DD	  _TEXT	
set_header_a . . . . . . . . . .	L Near	 00E9	  _TEXT	
set_header_bases . . . . . . . .	L Near	 00C6	  _TEXT	
set_header_c . . . . . . . . . .	L Near	 00FF	  _TEXT	
set_header_g . . . . . . . . . .	L Near	 012B	  _TEXT	
set_header_plus  . . . . . . . .	L Near	 0141	  _TEXT	
set_header_t . . . . . . . . . .	L Near	 0115	  _TEXT	
skip_space . . . . . . . . . . .	L Near	 04F7	  _TEXT	
start_count  . . . . . . . . . .	L Near	 0168	  _TEXT	
sw_continua2 . . . . . . . . . .	L Near	 0478	  _TEXT	
sw_continue  . . . . . . . . . .	L Near	 0454	  _TEXT	
sw_do  . . . . . . . . . . . . .	L Near	 0435	  _TEXT	
sw_f . . . . . . . . . . . . . .	Byte	 0480	  _DATA	
sw_m . . . . . . . . . . . . . .	Word	 0481	  _DATA	
sw_n . . . . . . . . . . . . . .	Word	 047E	  _DATA	
sw_store . . . . . . . . . . . .	L Near	 044A	  _TEXT	
valid_base . . . . . . . . . . .	L Near	 05C8	  _TEXT	

	   0 Warnings
	   0 Errors
