Microsoft (R) Macro Assembler Version 6.11		    09/08/23 14:43:33
trabalho.asm						     Page 1 - 1


				;             Trabalho Intel
				;
				;         Eduardo Rosa   00335503

				.model small
				.stack

 0000				.data
				ORG 80H             
 0080 00			CMDCNT DB ?          ;COMMAND LINE COUNT
 0081  007F [			CMDSTR DB 127 DUP(?)  ;COMMAND LINE BUFFER
        00
       ]
				;--------------------------------------------
				; DATA
				;--------------------------------------------
 = 000D				CR					      equ		0dh
 = 000A				LF					      equ		0ah

 0100  007F [			cmdline              db    127   dup(?)
        00
       ]
 017F  0032 [			inputFile            db    50    dup(?)        ; Nome do arquivo de entrada
        00
       ]
 01B1  0032 [			outputFile           db    50    dup(?)        ; Nome padrão do arquivo de saída
        00
       ]
 01E3 61 2E 6F 75 74 00		defaultOutputFile    db    'a.out', 0       ; Nome padrão do arquivo de saída
 01E9  0005 [			groupSizeStr         db    5     dup(?)               ; Tamanho do grupo de bases
        00
       ]
 01EE 00			groupSize            db    0
 01EF  0005 [			nitrogen_bases       db    5     dup(?)
        00
       ]
 01F4  0005 [			s_nitrogen_bases     db    5     dup(?)
        00
       ]
 01F9 00			fileSize             db    0
 01FA 00			base_a               db    0
 01FB 00			base_c               db    0
 01FC 00			base_t               db    0
 01FD 00			base_g               db    0
 01FE 00			base_plus            db    0
 01FF 61 63 74 67 2B 00		base_valid           db    "actg+", 0
 0205 45 72 72 6F 20 6E		errorCommandLineMsg	db		"Erro na escrita da linha de comando", CR, LF, 0
       61 20 65 73 63 72
       69 74 61 20 64 61
       20 6C 69 6E 68 61
       20 64 65 20 63 6F
       6D 61 6E 64 6F 0D
       0A 00
 022B 00			FlagError				db		0
 022C 0D 0A 00			MsgCRLF					db		CR, LF, 0
 022F 4E 6F 6D 65 20 64		MsgInputFile         db    "Nome do arquivo de entrada : ", 0
       6F 20 61 72 71 75
       69 76 6F 20 64 65
       20 65 6E 74 72 61
       64 61 20 3A 20 00
 024D 4E 6F 6D 65 20 64		MsgOutputFile        db    "Nome do arquivo de saída : ", 0
       6F 20 61 72 71 75
       69 76 6F 20 64 65
       20 73 61 C3 AD 64
       61 20 3A 20 00
 026A 54 61 6D 61 6E 68		MsgGroupSize         db    "Tamanho dos grupos de bases a serem calculados: ", 0
       6F 20 64 6F 73 20
       67 72 75 70 6F 73
       20 64 65 20 62 61
       73 65 73 20 61 20
       73 65 72 65 6D 20
       63 61 6C 63 75 6C
       61 64 6F 73 3A 20
       00
 029B 49 6E 66 6F 72 6D		MsgInformation       db    "Informações a serem colocadas no arquivo de saída: ", 0
       61 C3 A7 C3 B5 65
       73 20 61 20 73 65
       72 65 6D 20 63 6F
       6C 6F 63 61 64 61
       73 20 6E 6F 20 61
       72 71 75 69 76 6F
       20 64 65 20 73 61
       C3 AD 64 61 3A 20
       00
 02D2 4E C3 BA 6D 65 72		MsgBasesSizeInput    db    "Número de bases no arquivo de entrada: ", 0
       6F 20 64 65 20 62
       61 73 65 73 20 6E
       6F 20 61 72 71 75
       69 76 6F 20 64 65
       20 65 6E 74 72 61
       64 61 3A 20 00
 02FB 4E C3 BA 6D 65 72		MsgGroupCount        db    "Número de grupos a serem processados: ", 0
       6F 20 64 65 20 67
       72 75 70 6F 73 20
       61 20 73 65 72 65
       6D 20 70 72 6F 63
       65 73 73 61 64 6F
       73 3A 20 00
 0323 4E C3 BA 6D 65 72		MsgLinesInputFile    db    "Número de linhas do arquivo de entrada que contém bases: ", 0
       6F 20 64 65 20 6C
       69 6E 68 61 73 20
       64 6F 20 61 72 71
       75 69 76 6F 20 64
       65 20 65 6E 74 72
       61 64 61 20 71 75
       65 20 63 6F 6E 74
       C3 A9 6D 20 62 61
       73 65 73 3A 20 00
 035F 45 72 72 6F 20 6E		ErrorOpenFileMsg		db		"Erro na abertura do arquivo.", CR, LF, 0
       61 20 61 62 65 72
       74 75 72 61 20 64
       6F 20 61 72 71 75
       69 76 6F 2E 0D 0A
       00
 037E 45 72 72 6F 20 6E		ErrorReadFileMsg		db		"Erro na leitura do arquivo.", CR, LF, 0
       61 20 6C 65 69 74
       75 72 61 20 64 6F
       20 61 72 71 75 69
       76 6F 2E 0D 0A 00
 039C 45 72 72 6F 20 6E		ErrorCreateFileMsg	db		"Erro na criacao do arquivo", CR, LF, 0
       61 20 63 72 69 61
       63 61 6F 20 64 6F
       20 61 72 71 75 69
       76 6F 0D 0A 00
 03B9 45 72 72 6F 20 6E		ErrorWriteFileMsg		db		"Erro na escrita do arquivo", CR, LF, 0
       61 20 65 73 63 72
       69 74 61 20 64 6F
       20 61 72 71 75 69
       76 6F 0D 0A 00
 03D6 0000			FileHandle				dw		0						; Handler do arquivo de leitura
 03D8 0000			FileHandleDst			dw		0						; Handler do arquivo de saida
 03DA 00			FileBuffer				db		0 						; Buffer de leitura do arquivo
 03DB 0000			sw_n					   dw		0
 03DD 00			sw_f					   db		0
 03DE 0000			sw_m					   dw		0
 03E0 43 6F 75 6E 74 20		msg_base_a				db		"Count of 'A': ", 0
       6F 66 20 27 41 27
       3A 20 00
 03EF 43 6F 75 6E 74 20		msg_base_c				db		"Count of 'C': ", 0
       6F 66 20 27 43 27
       3A 20 00
 03FE 43 6F 75 6E 74 20		msg_base_t				db		"Count of 'T': ", 0
       6F 66 20 27 54 27
       3A 20 00
 040D 43 6F 75 6E 74 20		msg_base_g				db		"Count of 'G': ", 0
       6F 66 20 27 47 27
       3A 20 00
 041C  0006 [			base_a_str	         db		6 dup (?)   ; Buffer para o contador de 'A' em formato de string
        00
       ]
 0422  0006 [			base_c_str	         db		6 dup (?)   ; Buffer para o contador de 'C' em formato de string
        00
       ]
 0428  0006 [			base_t_str	         db		6 dup (?)   ; Buffer para o contador de 'T' em formato de string
        00
       ]
 042E  0006 [			base_g_str	         db		6 dup (?)   ; Buffer para o contador de 'G' em formato de string
        00
       ]
				;--------------------------------------------
				;SCAN INPUT PARAMETER LINE

 0000				.code
				.startup
 0017  BE 0081			   mov      si, 81h
 001A  B5 00			   mov      ch,0
 001C  26: 8A 0E 0080		   mov      cl,es:[80h]      ;PARAMETER COUNT by variable CMDCNT
 0021  E8 02CC			   call     get_commandline

 0024  8D 1E 022C R		   lea      bx,MsgCRLF
 0028  E8 0285			   call     printf_s

 002B  E8 03FF			   call     sort_nitrogen_bases

 002E  8D 1E 01E9 R		   lea      bx,groupSizeStr
 0032  E8 02A1			   call     atoi
 0035  8D 1E 01EE R		   lea      bx,groupSize
 0039  89 07			   mov      [bx], ax
				   
				   ;	Abre o arquivo
 003B  8D 16 017F R		   lea		dx,inputFile
 003F  E8 025A			   call 	   fopen
 0042  73 03 E9 0138		   jc		   ErrorOpenFile		;If (CF == 1), erro ao abrir o arquivo
 0047  A3 03D6 R		   mov		FileHandle,ax		; Salva handle do arquivo

 004A  8D 1E 01B1 R		   lea		bx, outputFile
 004E  83 3F 00			   cmp      [bx], 0
 0051  74 02			   je       DefaultOFile
 0053  EB 11			   jmp      CmdOFile

 0055				DefaultOFile:
 0055  8D 16 01E3 R		   lea		dx, defaultOutputFile
 0059  E8 0247			   call	   fcreate
 005C  73 03 E9 013B		   jc		   ErrorCreateFile
 0061  A3 03D8 R		   mov		FileHandleDst, ax
 0064  EB 0F			   jmp      LoopReadFile

 0066				CmdOFile:
 0066  8D 16 01B1 R		   lea		dx, outputFile
 006A  E8 0236			   call	   fcreate
 006D  73 03 E9 012A		   jc		   ErrorCreateFile
 0072  A3 03D8 R		   mov		FileHandleDst, ax

 0075				LoopReadFile:
 0075  8D 36 01F4 R		      lea   si, s_nitrogen_bases
 0079				   set_header_bases:
 0079  80 3C 00			      cmp   byte ptr[si], 0
 007C  75 03 E9 009E		      je    count_bases 
 0081  80 3C 61			      cmp   byte ptr[si], 'a'
 0084  74 17			      je    set_header_a
 0086  80 3C 63			      cmp   byte ptr[si], 'c'
 0089  74 28			      je    set_header_c
 008B  80 3C 74			      cmp   byte ptr[si], 't'
 008E  74 39			      je    set_header_t
 0090  80 3C 67			      cmp   byte ptr[si], 'g'
 0093  74 4A			      je    set_header_g
 0095  80 3C 2B			      cmp   byte ptr[si], '+'
 0098  74 5B			      je    set_header_plus
 009A  E9 0082			      jmp   count_bases

 009D				   set_header_a:
 009D  B2 41			      mov   dl, 'A'
 009F  8B 1E 03D8 R		      mov   bx, FileHandleDst
 00A3  E8 0220			      call  setChar
 00A6  46			      inc   si
 00A7  80 3C 00			      cmp   byte ptr[si], 0
 00AA  74 73			      je    count_bases
 00AC  B2 3B			      mov   dl, 3bh
 00AE  E8 0215			      call  setChar
 00B1  EB C6			      jmp   set_header_bases
 00B3				   set_header_c:
 00B3  B2 43			      mov   dl, 'C'
 00B5  8B 1E 03D8 R		      mov   bx, FileHandleDst
 00B9  E8 020A			      call  setChar
 00BC  46			      inc   si
 00BD  80 3C 00			      cmp   byte ptr[si], 0
 00C0  74 5D			      je    count_bases
 00C2  B2 3B			      mov   dl, 3bh
 00C4  E8 01FF			      call  setChar
 00C7  EB B0			      jmp   set_header_bases
 00C9				   set_header_t:
 00C9  B2 54			      mov   dl, 'T'
 00CB  8B 1E 03D8 R		      mov   bx, FileHandleDst
 00CF  E8 01F4			      call  setChar
 00D2  46			      inc   si
 00D3  80 3C 00			      cmp   byte ptr[si], 0
 00D6  74 47			      je    count_bases
 00D8  B2 3B			      mov   dl, 3bh
 00DA  E8 01E9			      call  setChar
 00DD  EB 9A			      jmp   set_header_bases
 00DF				   set_header_g:
 00DF  B2 47			      mov   dl, 'G'
 00E1  8B 1E 03D8 R		      mov   bx, FileHandleDst
 00E5  E8 01DE			      call  setChar
 00E8  46			      inc   si
 00E9  80 3C 00			      cmp   byte ptr[si], 0
 00EC  74 31			      je    count_bases
 00EE  B2 3B			      mov   dl, 3bh
 00F0  E8 01D3			      call  setChar
 00F3  EB 84			      jmp   set_header_bases

 00F5				   set_header_plus:
 00F5  B2 41			      mov   dl, 'A'
 00F7  8B 1E 03D8 R		      mov   bx, FileHandleDst
 00FB  E8 01C8			      call  setChar
 00FE  B2 2B			      mov   dl, 2bh
 0100  E8 01C3			      call  setChar
 0103  B2 54			      mov   dl, 'T'
 0105  E8 01BE			      call  setChar
 0108  B2 3B			      mov   dl, 3bh
 010A  E8 01B9			      call  setChar
 010D  B2 43			      mov   dl, 'C'
 010F  E8 01B4			      call  setChar
 0112  B2 2B			      mov   dl, 2bh
 0114  E8 01AF			      call  setChar
 0117  B2 47			      mov   dl, 'G'
 0119  E8 01AA			      call  setChar
 011C  E9 0099			      jmp   CloseAndFinal

 011F				   count_bases:
 011F  B2 0D			      mov     dl, CR
 0121  E8 01A2			      call    setChar
 0124  B2 0A			      mov     dl, LF
 0126  E8 019D			      call    setChar
 0129  8D 1E 01EE R		      lea     bx,groupSize
 012D  8B 0F			      mov     cx,[bx]
 012F  C6 06 01FA R 00		      mov     base_a, 0
 0134  C6 06 01FB R 00		      mov     base_c, 0
 0139  C6 06 01FC R 00		      mov     base_t, 0
 013E  C6 06 01FD R 00		      mov     base_g, 0
 0143				      count_bases_loop:
 0143  8B 1E 03D6 R		         mov     bx, FileHandle
 0147  E8 0142			         call    getChar
 014A  72 42			         jc      ErrorReadFile
 014C  83 F8 00			         cmp     ax, 0
 014F  74 67			         jz      CloseAndFinal
 0151  8A C2			         mov     al, dl
				         ; Check for 'A', 'C', 'T', 'G' and update counters
 0153  3C 41			         cmp     al, 'A'
 0155  74 10			         je      IncrementA
 0157  3C 43			         cmp     al, 'C'
 0159  74 12			         je      IncrementC
 015B  3C 54			         cmp     al, 'T'
 015D  74 14			         je      IncrementT
 015F  3C 47			         cmp     al, 'G'
 0161  74 16			         je      IncrementG
 0163  E2 DE			         loop    count_bases_loop
 0165  EB B8			         jmp     count_bases

 0167				         IncrementA:
 0167  FE 06 01FA R		            inc     base_a
 016B  EB D6			            jmp     count_bases_loop

 016D				         IncrementC:
 016D  FE 06 01FB R		            inc     base_c
 0171  EB D0			            jmp     count_bases_loop

 0173				         IncrementT:
 0173  FE 06 01FC R		            inc     base_t
 0177  EB CA			            jmp     count_bases_loop

 0179				         IncrementG:
 0179  FE 06 01FD R		            inc     base_g
 017D  EB C4			            jmp     count_bases_loop

 017F				ErrorOpenFile:
 017F  8D 1E 035F R				lea		bx,ErrorOpenFileMsg
 0183  E8 012A					call	   printf_s
 0186  C6 06 022B R 01				mov		FlagError,1
 018B  E9 00A2					jmp		Final

 018E				ErrorReadFile:
 018E  8D 1E 037E R				lea		bx, ErrorReadFileMsg
 0192  E8 011B					call	   printf_s
 0195  C6 06 022B R 01				mov		FlagError, 1
 019A  EB 1C					jmp		CloseAndFinal

 019C				ErrorCreateFile:
 019C  8D 1E 039C R				lea		bx, ErrorCreateFileMsg
 01A0  E8 010D					call	   printf_s
 01A3  C6 06 022B R 01				mov		FlagError, 1
 01A8  EB 0E					jmp		CloseAndFinal

 01AA				ErrorWriteFile:
 01AA  8D 1E 03B9 R				lea 	   bx, ErrorWriteFileMsg
 01AE  E8 00FF					call	   printf_s
 01B1  C6 06 022B R 01				mov		FlagError, 1
 01B6  EB 00					jmp		CloseAndFinal

 01B8				CloseAndFinal:

				    ; Display counts of 'A', 'C', 'T', 'G'
				    ; Após incrementar cada contador (IncrementA, IncrementC, IncrementT, IncrementG), converta o valor para string

					; convert A to string
 01B8  A0 01FA R			mov      al, base_a
 01BB  BB 041C R			mov      bx, offset base_a_str
 01BE  E8 0073				call     sprintf_w

					; convert C to string
 01C1  A0 01FB R			mov      al, base_c
 01C4  BB 0422 R			mov      bx, offset base_c_str
 01C7  E8 006A				call     sprintf_w

					; convert T to string
 01CA  A0 01FC R			mov      al, base_t
 01CD  BB 0428 R			mov      bx, offset base_t_str
 01D0  E8 0061				call     sprintf_w

					; convert G to string
 01D3  A0 01FD R			mov      al, base_g
 01D6  BB 042E R			mov      bx, offset base_g_str
 01D9  E8 0058				call     sprintf_w

					; Breakline
 01DC  8D 1E 022C R			lea		bx,MsgCRLF
 01E0  E8 00CD				call	   printf_s

					; Print A message and A counter
 01E3  8D 1E 03E0 R			lea      bx, msg_base_a
 01E7  E8 00C6				call     printf_s
 01EA  8D 1E 041C R			lea      bx, base_a_str
 01EE  E8 00BF				call     printf_s

					; Breakline
 01F1  8D 1E 022C R			lea		bx,MsgCRLF
 01F5  E8 00B8				call	   printf_s

					; Print C message and C counter
 01F8  8D 1E 03EF R			lea      bx, msg_base_c
 01FC  E8 00B1				call     printf_s
 01FF  8D 1E 0422 R			lea      bx, base_c_str
 0203  E8 00AA				call     printf_s

					; Breakline
 0206  8D 1E 022C R			lea		bx,MsgCRLF
 020A  E8 00A3				call	   printf_s

					; Print T message and T counter
 020D  8D 1E 03FE R			lea      bx, msg_base_t
 0211  E8 009C				call     printf_s
 0214  8D 1E 0428 R			lea      bx, base_t_str
 0218  E8 0095				call     printf_s

					; Breakline
 021B  8D 1E 022C R			lea		bx,MsgCRLF
 021F  E8 008E				call	   printf_s

					; Print G message and G counter
 0222  8D 1E 040D R			lea      bx, msg_base_g
 0226  E8 0087				call     printf_s
 0229  8D 1E 042E R			lea      bx, base_g_str
 022D  E8 0080				call     printf_s

 0230				Final:
						.exit

				;
				;--------------------------------------------------------------------
				;Função: Converte um inteiro (n) para (string)
				;		 sprintf(string->BX, "%d", n->AX)
				;--------------------------------------------------------------------
 0234				sprintf_w	proc	near
 0234  A3 03DB R			mov		sw_n,ax
 0237  B9 0005				mov		cx,5
 023A  C7 06 03DE R 2710		mov		sw_m,10000
 0240  C6 06 03DD R 00			mov		sw_f,0
					
 0245				sw_do:
 0245  BA 0000				mov		dx,0
 0248  A1 03DB R			mov		ax,sw_n
 024B  F7 36 03DE R			div		sw_m
					
 024F  3C 00				cmp		al,0
 0251  75 07				jne		sw_store
 0253  80 3E 03DD R 00			cmp		sw_f,0
 0258  74 0A				je		sw_continue
 025A				sw_store:
 025A  04 30				add		al,'0'
 025C  88 07				mov		[bx],al
 025E  43				inc		bx
					
 025F  C6 06 03DD R 01			mov		sw_f,1
 0264				sw_continue:
					
 0264  89 16 03DB R			mov		sw_n,dx
					
 0268  BA 0000				mov		dx,0
 026B  A1 03DE R			mov		ax,sw_m
 026E  BD 000A				mov		bp,10
 0271  F7 F5				div		bp
 0273  A3 03DE R			mov		sw_m,ax
					
 0276  49				dec		cx
 0277  83 F9 00				cmp		cx,0
 027A  75 C9				jnz		sw_do

 027C  80 3E 03DD R 00			cmp		sw_f,0
 0281  75 05				jnz		sw_continua2
 0283  C7 07 0030			mov		[bx],'0'
 0287  43				inc		bx
 0288				sw_continua2:

 0288  C6 07 00				mov		byte ptr[bx],0
 028B  C3				ret		
 028C				sprintf_w	endp

				;
				;--------------------------------------------------------------------
				;Função	Le um caractere do arquivo identificado pelo HANLDE BX
				;		getChar(handle->BX)
				;Entra: BX -> file handle
				;Sai:   dl -> caractere
				;		AX -> numero de caracteres lidos
				;		CF -> "0" se leitura ok
				;--------------------------------------------------------------------
 028C				getChar	proc	near
 028C  B4 3F				mov		ah,3fh
 028E  B9 0001				mov		cx,1
 0291  8D 16 03DA R			lea		dx,FileBuffer
 0295  CD 21				int		21h
 0297  8A 16 03DA R			mov		dl,FileBuffer
 029B  C3				ret
 029C				getChar	endp

				;
				;--------------------------------------------------------------------
				;Função	Abre o arquivo cujo nome está no string apontado por DX
				;		boolean fopen(char *FileName -> DX)
				;Entra: DX -> ponteiro para o string com o nome do arquivo
				;Sai:   AX -> handle do arquivo
				;       CF -> 0, se OK
				;--------------------------------------------------------------------
 029C				fopen	proc	near
 029C  B0 00				mov		al,0
 029E  B4 3D				mov		ah,3dh
 02A0  CD 21				int		21h
 02A2  C3				ret
 02A3				fopen	endp

				;
				;--------------------------------------------------------------------
				;Função Cria o arquivo cujo nome está no string apontado por DX
				;		boolean fcreate(char *FileName -> DX)
				;Sai:   AX -> handle do arquivo
				;       CF -> 0, se OK
				;--------------------------------------------------------------------
 02A3				fcreate	proc	near
 02A3  B9 0000				mov		cx,0
 02A6  B4 3C				mov		ah,3ch
 02A8  CD 21				int		21h
 02AA  C3				ret
 02AB				fcreate	endp

				;
				;--------------------------------------------------------------------
				;Entra:	BX -> file handle
				;Sai:	CF -> "0" se OK
				;--------------------------------------------------------------------
 02AB				fclose	proc	near
 02AB  B4 3E				mov		ah,3eh
 02AD  CD 21				int		21h
 02AF  C3				ret
 02B0				fclose	endp

				;
				;--------------------------------------------------------------------
				;Função Escrever um string na tela
				;		printf_s(char *s -> BX)
				;--------------------------------------------------------------------
 02B0				printf_s	   proc	near
 02B0  8A 17				mov		dl,[bx]
 02B2  80 FA 00				cmp		dl,0
 02B5  74 09				je		   ps_1

 02B7  53				push	   bx
 02B8  B4 02				mov		ah,2
 02BA  CD 21				int		21H
 02BC  5B				pop		bx

 02BD  43				inc		bx		
 02BE  EB F0				jmp		printf_s
						
 02C0				ps_1:
 02C0  C3				ret
 02C1				printf_s	   endp

				;
				;--------------------------------------------------------------------
				;Função Escrever um char na tela
				;		Entra: DL -> Char a ser escrito
				;--------------------------------------------------------------------
 02C1				printf_c	   proc	near
 02C1  B4 02					mov		ah, 2
 02C3  CD 21					int		21H
 02C5  C3					ret
 02C6				printf_c	   endp

				;
				;--------------------------------------------------------------------
				;Entra: BX -> file handle
				;       dl -> caractere
				;Sai:   AX -> numero de caracteres escritos
				;		CF -> "0" se escrita ok
				;--------------------------------------------------------------------
 02C6				setChar	proc	near
 02C6  B4 40				mov		ah,40h
 02C8  B9 0001				mov		cx,1
 02CB  88 16 03DA R			mov		FileBuffer,dl
 02CF  8D 16 03DA R			lea		dx,FileBuffer
 02D3  CD 21				int		21h
 02D5  C3				ret
 02D6				setChar	endp

				;
				;--------------------------------------------------------------------
				;Função:Converte um ASCII-DECIMAL para HEXA
				;Entra: (S) -> DS:BX -> Ponteiro para o string de origem
				;Sai:	(A) -> AX -> Valor "Hex" resultante
				;Algoritmo:
				;	A = 0;
				;	while (*S!='\0') {
				;		A = 10 * A + (*S - '0')
				;		++S;
				;	}
				;	return
				;--------------------------------------------------------------------
 02D6				atoi	      proc near

						; A = 0;
 02D6  B8 0000					mov		ax,0
						
 02D9				atoi_2:
						; while (*S!='\0') {
 02D9  80 3F 00					cmp		byte ptr[bx], 0
 02DC  74 11					jz		   atoi_1

						; 	A = 10 * A
 02DE  B9 000A					mov		cx,10
 02E1  F7 E1					mul		cx

						; 	A = A + *S
 02E3  B5 00					mov		ch,0
 02E5  8A 0F					mov		cl,[bx]
 02E7  03 C1					add		ax,cx

						; 	A = A - '0'
 02E9  83 E8 30					sub		ax,'0'

						; 	++S
 02EC  43					inc		bx
						
						;}
 02ED  EB EA					jmp		atoi_2

 02EF				atoi_1:
						; return
 02EF  C3					ret

 02F0				atoi	      endp

				;
				;--------------------------------------------------------------------
				; Parse commandline in arguments
				;--------------------------------------------------------------------
 02F0				get_commandline	proc	near
 02F0  83 F9 00			   cmp      cx,0
 02F3  75 03				jnz      parse_command_line          ;YES - PROCESS COMMAND LINE PARAMETERS
 02F5  E9 0133			   jmp      no_arguments           ;NO - PARAMETERS
				   
 02F8				parse_command_line:   
 02F8				   skip_space:
 02F8  26: 8A 04		      mov   al, es:[si]
 02FB  3C 20			      cmp   al, ' '
 02FD  74 0A			      je    next_option
 02FF  3C 0D			      cmp   al, CR
 0301  75 03 E9 0125		      je    no_arguments
 0306  46			      inc   si
 0307  EB EF			      jmp   skip_space
				   
 0309				   next_option:
 0309  46			      inc   si
 030A  26: 8A 04		      mov   al, es:[si]

				      ; Verificar se encontramos uma opção válida
 030D  3C 2D			      cmp   al, '-'
 030F  74 03 E9 0108		      jne   invalid_option

						; Move string pointer
 0314  46					inc   si
 0315  26: 8A 04				mov   al, es:[si]
 0318  3C 0D			      cmp   al, CR
 031A  75 03 E9 00FD		      je    invalid_option
 031F  3C 66					cmp   al, 'f'
 0321  74 0A			      je    f_option
 0323  3C 6F					cmp   al, 'o'
 0325  74 26			      je    o_option
 0327  3C 6E					cmp   al, 'n'
 0329  74 42			      je    n_option
 032B  EB 75			      jmp   base_option

 032D				   f_option:
 032D  8D 3E 017F R		      lea   di, inputFile
 0331  46			      inc   si
 0332  26: 8A 04		      mov   al, es:[si]
 0335  3C 20			      cmp   al, ' '
 0337  74 03 E9 00E0		      jne   invalid_option
 033C				      f_option_loop:
 033C  46			         inc   si
 033D  26: 8A 04		         mov   al, es:[si]
 0340  3C 20			         cmp   al, ' '
 0342  74 B4			         je    skip_space
 0344  3C 0D			         cmp   al, CR
 0346  74 B0			         je    skip_space
 0348  88 05			         mov   [di], al
 034A  47			         inc   di
 034B  EB EF			         jmp   f_option_loop 

 034D					o_option:
 034D  8D 3E 01B1 R		      lea   di, outputFile
 0351  46			      inc   si
 0352  26: 8A 04		      mov   al, es:[si]
 0355  3C 20			      cmp   al, ' '
 0357  74 03 E9 00C0		      jne   invalid_option
 035C				      o_option_loop:
 035C  46			         inc   si
 035D  26: 8A 04		         mov   al, es:[si]
 0360  3C 20			         cmp   al, ' '
 0362  74 94			         je    skip_space
 0364  3C 0D			         cmp   al, CR
 0366  74 90			         je    skip_space
 0368  88 05			         mov   [di], al
 036A  47			         inc   di
 036B  EB EF			         jmp   o_option_loop 

 036D					n_option:
 036D  8D 3E 01E9 R		      lea   di, groupSizeStr
 0371  46			      inc   si
 0372  26: 8A 04		      mov   al, es:[si]
 0375  3C 20			      cmp   al, ' '
 0377  74 03 E9 00A0		      jne   invalid_option
 037C				      n_option_loop:
 037C  46			         inc   si
 037D  26: 8A 04		         mov   al, es:[si]
 0380  3C 20			         cmp   al, ' '
 0382  74 17			         je    end_n_option
 0384  3C 0D			         cmp   al, CR
 0386  74 13			         je    end_n_option
 0388  3C 39			         cmp   al, 39h
 038A  7E 03 E9 008D		         jg    invalid_option
 038F  3C 30			         cmp   al, 30h
 0391  7D 03 E9 0086		         jl    invalid_option
 0396  88 05			         mov   [di], al
 0398  47			         inc   di
 0399  EB E1			         jmp   n_option_loop
 039B				      end_n_option:
 039B  C7 05 0000		         mov   [di], 0
 039F  E9 FF56			         jmp   skip_space

 03A2					base_option:
 03A2  8D 3E 01FF R		      lea   di, base_valid    ; di = base_valid initial adress
 03A6  8D 1E 01EF R		      lea   bx, nitrogen_bases
 03AA  3C 20			      cmp   al, ' '           ; if space invalid
 03AC  74 6E			      je    invalid_option
 03AE  3C 0D			      cmp   al, CR            ; if cr invalid
 03B0  74 6A			      je    invalid_option
 03B2				   base_check_loop:
 03B2  8D 3E 01FF R		      lea   di, base_valid    ; di = base_valid initial adress
 03B6  26: 8A 04		      mov   al, es:[si]       ; al = cmdline char
 03B9  3C 20			      cmp   al, ' '           ; if space base_cmd ended
 03BB  74 50			      je    done_parsing_base
 03BD  3C 0D			      cmp   al, CR            ; if cr base_cmd ended
 03BF  74 4C			      je    done_parsing_base             
 03C1				   search_loop:
 03C1  3A 05			      cmp   al, [di]       ; if cmdline char == base_valid initial address
 03C3  74 0A			      je    char_is_valid     ; char_is_valid()
 03C5  47			      inc   di                ; base_address++
 03C6  8A 0D			      mov   cl, [di]                ; base_address++
 03C8  80 F9 00			      cmp   cl, 0             ; if base_address == 0
 03CB  75 F4			      jne   search_loop       ; search_loop()
 03CD  EB 40			      jmp   invalid_base_option
				      
 03CF				   char_is_valid:
 03CF  3C 61			      cmp   al, 'a'           ; if cmdline char == 'a'
 03D1  74 12			      je    put_a             ; base_a = True
 03D3  3C 63			      cmp   al, 'c'           ; if cmdline char == 'c'
 03D5  74 16			      je    put_c             ; base_c = True
 03D7  3C 74			      cmp   al, 't'           ; if cmdline char == 't'
 03D9  74 1A			      je    put_t             ; base_t = True
 03DB  3C 67			      cmp   al, 'g'           ; if cmdline char == 'g'
 03DD  74 1E			      je    put_g             ; base_g = True
 03DF  3C 2B			      cmp   al, '+'           ; if cmdline char == '+'
 03E1  74 22			      je    put_plus          ; base_plus = True
 03E3  EB CD			      jmp   base_check_loop

 03E5				      put_a: 
 03E5  C7 07 0061		         mov   [bx], 'a'
 03E9  43			         inc   bx
 03EA  46			         inc   si
 03EB  EB C5			         jmp   base_check_loop   
 03ED				      put_c: 
 03ED  C7 07 0063		         mov   [bx], 'c'
 03F1  43			         inc   bx
 03F2  46			         inc   si
 03F3  EB BD			         jmp   base_check_loop   
 03F5				      put_t: 
 03F5  C7 07 0074		         mov   [bx], 't'
 03F9  43			         inc   bx
 03FA  46			         inc   si
 03FB  EB B5			         jmp   base_check_loop   
 03FD				      put_g: 
 03FD  C7 07 0067		         mov   [bx], 'g'
 0401  43			         inc   bx
 0402  46			         inc   si
 0403  EB AD			         jmp   base_check_loop   
 0405				      put_plus: 
 0405  C7 07 002B		         mov   [bx], '+'
 0409  43			         inc   bx
 040A  46			         inc   si
 040B  EB A5			         jmp   base_check_loop      

 040D				    done_parsing_base:
 040D  EB 1C			         jmp   no_arguments                                                     

 040F				   invalid_base_option:
 040F  B9 0005			      mov cx, 5                 ; Set the loop counter to the number of elements
 0412  8D 36 01EF R		      lea si, nitrogen_bases    ; Set edi to point to the start of the array

 0416				      invalid_base_loop:
 0416  C6 04 00			         mov byte ptr [si], 0          ; Zero out the current element
 0419  46			         inc si                    ; Move to the next element
 041A  E2 FA			         loop invalid_base_loop

 041C				   invalid_option:
 041C  8D 1E 0205 R		      lea   bx,errorCommandLineMsg
 0420  E8 FE8D			      call  printf_s
 0423  C6 06 022B R 01		      mov	FlagError,1
 0428  E9 FECD			      jmp   skip_space
				   
 042B  90			no_arguments:  NOP

 042C  C3			      ret
 042D				get_commandline   endp

 042D				sort_nitrogen_bases  proc  near

 042D  8D 3E 01EF R		      lea   di,nitrogen_bases
 0431  8D 36 01F4 R		      lea   si,s_nitrogen_bases
 0435				   s_loop_a:
 0435  83 3D 00			      cmp   [di], 0
 0438  74 0B			      je    s_loop_t
 043A  83 3D 61			      cmp   [di], 'a'
 043D  74 01			      je    s_put_a
 043F  47			      inc   di
 0440				   s_put_a:
 0440  C7 04 0061		      mov   [si],'a'
 0444  46			      inc   si 
 0445				   s_loop_t:
 0445  83 3D 00			      cmp   [di], 0
 0448  74 0B			      je    s_loop_c
 044A  83 3D 74			      cmp   [di], 't'
 044D  74 01			      je    s_put_t
 044F  47			      inc   di
 0450				   s_put_t:
 0450  C7 04 0074		      mov   [si],'t'
 0454  46			      inc   si
 0455				   s_loop_c:
 0455  83 3D 00			      cmp   [di], 0
 0458  74 0B			      je    s_loop_g
 045A  83 3D 63			      cmp   [di], 'c'
 045D  74 01			      je    s_put_c
 045F  47			      inc   di
 0460				   s_put_c:
 0460  C7 04 0063		      mov   [si],'c'
 0464  46			      inc   si
 0465				   s_loop_g:
 0465  83 3D 00			      cmp   [di], 0
 0468  74 0B			      je    s_loop_plus
 046A  83 3D 67			      cmp   [di], 'g'
 046D  74 01			      je    s_put_g
 046F  47			      inc   di
 0470				   s_put_g:
 0470  C7 04 0067		      mov   [si],'g'
 0474  46			      inc   si
 0475				   s_loop_plus:
 0475  83 3D 00			      cmp   [di], 0
 0478  74 0A			      je    s_ret
 047A  83 3D 2B			      cmp   [di], '+'
 047D  74 01			      je    s_put_plus
 047F  47			      inc   di
 0480				   s_put_plus:
 0480  C7 04 002B		      mov   [si],'+'
 0484				   s_ret:
 0484  C3			      ret

 0485				sort_nitrogen_bases  endp

				;--------------------------------------------------------------------
						end
				;--------------------------------------------------------------------
Microsoft (R) Macro Assembler Version 6.11		    09/08/23 14:43:33
trabalho.asm						     Symbols 2 - 1




Segments and Groups:

                N a m e                 Size     Length   Align   Combine Class

DGROUP . . . . . . . . . . . . .	GROUP
_DATA  . . . . . . . . . . . . .	16 Bit	 0434	  Word	  Public  'DATA'	
STACK  . . . . . . . . . . . . .	16 Bit	 0400	  Para	  Stack	  'STACK'	 
_TEXT  . . . . . . . . . . . . .	16 Bit	 0485	  Word	  Public  'CODE'	


Procedures,  parameters and locals:

                N a m e                 Type     Value    Attr

atoi . . . . . . . . . . . . . .	P Near	 02D6	  _TEXT	Length= 001A Private
fclose . . . . . . . . . . . . .	P Near	 02AB	  _TEXT	Length= 0005 Private
fcreate  . . . . . . . . . . . .	P Near	 02A3	  _TEXT	Length= 0008 Private
fopen  . . . . . . . . . . . . .	P Near	 029C	  _TEXT	Length= 0007 Private
getChar  . . . . . . . . . . . .	P Near	 028C	  _TEXT	Length= 0010 Private
get_commandline  . . . . . . . .	P Near	 02F0	  _TEXT	Length= 013D Private
printf_c . . . . . . . . . . . .	P Near	 02C1	  _TEXT	Length= 0005 Private
printf_s . . . . . . . . . . . .	P Near	 02B0	  _TEXT	Length= 0011 Private
setChar  . . . . . . . . . . . .	P Near	 02C6	  _TEXT	Length= 0010 Private
sort_nitrogen_bases  . . . . . .	P Near	 042D	  _TEXT	Length= 0058 Private
sprintf_w  . . . . . . . . . . .	P Near	 0234	  _TEXT	Length= 0058 Private


Symbols:

                N a m e                 Type     Value    Attr

@CodeSize  . . . . . . . . . . .	Number	 0000h	 
@DataSize  . . . . . . . . . . .	Number	 0000h	 
@Interface . . . . . . . . . . .	Number	 0000h	 
@Model . . . . . . . . . . . . .	Number	 0002h	 
@Startup . . . . . . . . . . . .	L Near	 0000	  _TEXT	
@code  . . . . . . . . . . . . .	Text   	 _TEXT
@data  . . . . . . . . . . . . .	Text   	 DGROUP
@fardata?  . . . . . . . . . . .	Text   	 FAR_BSS
@fardata . . . . . . . . . . . .	Text   	 FAR_DATA
@stack . . . . . . . . . . . . .	Text   	 DGROUP
CMDCNT . . . . . . . . . . . . .	Byte	 0080	  _DATA	
CMDSTR . . . . . . . . . . . . .	Byte	 0081	  _DATA	
CR . . . . . . . . . . . . . . .	Number	 000Dh	 
CloseAndFinal  . . . . . . . . .	L Near	 01B8	  _TEXT	
CmdOFile . . . . . . . . . . . .	L Near	 0066	  _TEXT	
DefaultOFile . . . . . . . . . .	L Near	 0055	  _TEXT	
ErrorCreateFileMsg . . . . . . .	Byte	 039C	  _DATA	
ErrorCreateFile  . . . . . . . .	L Near	 019C	  _TEXT	
ErrorOpenFileMsg . . . . . . . .	Byte	 035F	  _DATA	
ErrorOpenFile  . . . . . . . . .	L Near	 017F	  _TEXT	
ErrorReadFileMsg . . . . . . . .	Byte	 037E	  _DATA	
ErrorReadFile  . . . . . . . . .	L Near	 018E	  _TEXT	
ErrorWriteFileMsg  . . . . . . .	Byte	 03B9	  _DATA	
ErrorWriteFile . . . . . . . . .	L Near	 01AA	  _TEXT	
FileBuffer . . . . . . . . . . .	Byte	 03DA	  _DATA	
FileHandleDst  . . . . . . . . .	Word	 03D8	  _DATA	
FileHandle . . . . . . . . . . .	Word	 03D6	  _DATA	
Final  . . . . . . . . . . . . .	L Near	 0230	  _TEXT	
FlagError  . . . . . . . . . . .	Byte	 022B	  _DATA	
IncrementA . . . . . . . . . . .	L Near	 0167	  _TEXT	
IncrementC . . . . . . . . . . .	L Near	 016D	  _TEXT	
IncrementG . . . . . . . . . . .	L Near	 0179	  _TEXT	
IncrementT . . . . . . . . . . .	L Near	 0173	  _TEXT	
LF . . . . . . . . . . . . . . .	Number	 000Ah	 
LoopReadFile . . . . . . . . . .	L Near	 0075	  _TEXT	
MsgBasesSizeInput  . . . . . . .	Byte	 02D2	  _DATA	
MsgCRLF  . . . . . . . . . . . .	Byte	 022C	  _DATA	
MsgGroupCount  . . . . . . . . .	Byte	 02FB	  _DATA	
MsgGroupSize . . . . . . . . . .	Byte	 026A	  _DATA	
MsgInformation . . . . . . . . .	Byte	 029B	  _DATA	
MsgInputFile . . . . . . . . . .	Byte	 022F	  _DATA	
MsgLinesInputFile  . . . . . . .	Byte	 0323	  _DATA	
MsgOutputFile  . . . . . . . . .	Byte	 024D	  _DATA	
atoi_1 . . . . . . . . . . . . .	L Near	 02EF	  _TEXT	
atoi_2 . . . . . . . . . . . . .	L Near	 02D9	  _TEXT	
base_a_str . . . . . . . . . . .	Byte	 041C	  _DATA	
base_a . . . . . . . . . . . . .	Byte	 01FA	  _DATA	
base_c_str . . . . . . . . . . .	Byte	 0422	  _DATA	
base_check_loop  . . . . . . . .	L Near	 03B2	  _TEXT	
base_c . . . . . . . . . . . . .	Byte	 01FB	  _DATA	
base_g_str . . . . . . . . . . .	Byte	 042E	  _DATA	
base_g . . . . . . . . . . . . .	Byte	 01FD	  _DATA	
base_option  . . . . . . . . . .	L Near	 03A2	  _TEXT	
base_plus  . . . . . . . . . . .	Byte	 01FE	  _DATA	
base_t_str . . . . . . . . . . .	Byte	 0428	  _DATA	
base_t . . . . . . . . . . . . .	Byte	 01FC	  _DATA	
base_valid . . . . . . . . . . .	Byte	 01FF	  _DATA	
char_is_valid  . . . . . . . . .	L Near	 03CF	  _TEXT	
cmdline  . . . . . . . . . . . .	Byte	 0100	  _DATA	
count_bases_loop . . . . . . . .	L Near	 0143	  _TEXT	
count_bases  . . . . . . . . . .	L Near	 011F	  _TEXT	
defaultOutputFile  . . . . . . .	Byte	 01E3	  _DATA	
done_parsing_base  . . . . . . .	L Near	 040D	  _TEXT	
end_n_option . . . . . . . . . .	L Near	 039B	  _TEXT	
errorCommandLineMsg  . . . . . .	Byte	 0205	  _DATA	
f_option_loop  . . . . . . . . .	L Near	 033C	  _TEXT	
f_option . . . . . . . . . . . .	L Near	 032D	  _TEXT	
fileSize . . . . . . . . . . . .	Byte	 01F9	  _DATA	
groupSizeStr . . . . . . . . . .	Byte	 01E9	  _DATA	
groupSize  . . . . . . . . . . .	Byte	 01EE	  _DATA	
inputFile  . . . . . . . . . . .	Byte	 017F	  _DATA	
invalid_base_loop  . . . . . . .	L Near	 0416	  _TEXT	
invalid_base_option  . . . . . .	L Near	 040F	  _TEXT	
invalid_option . . . . . . . . .	L Near	 041C	  _TEXT	
msg_base_a . . . . . . . . . . .	Byte	 03E0	  _DATA	
msg_base_c . . . . . . . . . . .	Byte	 03EF	  _DATA	
msg_base_g . . . . . . . . . . .	Byte	 040D	  _DATA	
msg_base_t . . . . . . . . . . .	Byte	 03FE	  _DATA	
n_option_loop  . . . . . . . . .	L Near	 037C	  _TEXT	
n_option . . . . . . . . . . . .	L Near	 036D	  _TEXT	
next_option  . . . . . . . . . .	L Near	 0309	  _TEXT	
nitrogen_bases . . . . . . . . .	Byte	 01EF	  _DATA	
no_arguments . . . . . . . . . .	L Near	 042B	  _TEXT	
o_option_loop  . . . . . . . . .	L Near	 035C	  _TEXT	
o_option . . . . . . . . . . . .	L Near	 034D	  _TEXT	
outputFile . . . . . . . . . . .	Byte	 01B1	  _DATA	
parse_command_line . . . . . . .	L Near	 02F8	  _TEXT	
ps_1 . . . . . . . . . . . . . .	L Near	 02C0	  _TEXT	
put_a  . . . . . . . . . . . . .	L Near	 03E5	  _TEXT	
put_c  . . . . . . . . . . . . .	L Near	 03ED	  _TEXT	
put_g  . . . . . . . . . . . . .	L Near	 03FD	  _TEXT	
put_plus . . . . . . . . . . . .	L Near	 0405	  _TEXT	
put_t  . . . . . . . . . . . . .	L Near	 03F5	  _TEXT	
s_loop_a . . . . . . . . . . . .	L Near	 0435	  _TEXT	
s_loop_c . . . . . . . . . . . .	L Near	 0455	  _TEXT	
s_loop_g . . . . . . . . . . . .	L Near	 0465	  _TEXT	
s_loop_plus  . . . . . . . . . .	L Near	 0475	  _TEXT	
s_loop_t . . . . . . . . . . . .	L Near	 0445	  _TEXT	
s_nitrogen_bases . . . . . . . .	Byte	 01F4	  _DATA	
s_put_a  . . . . . . . . . . . .	L Near	 0440	  _TEXT	
s_put_c  . . . . . . . . . . . .	L Near	 0460	  _TEXT	
s_put_g  . . . . . . . . . . . .	L Near	 0470	  _TEXT	
s_put_plus . . . . . . . . . . .	L Near	 0480	  _TEXT	
s_put_t  . . . . . . . . . . . .	L Near	 0450	  _TEXT	
s_ret  . . . . . . . . . . . . .	L Near	 0484	  _TEXT	
search_loop  . . . . . . . . . .	L Near	 03C1	  _TEXT	
set_header_a . . . . . . . . . .	L Near	 009D	  _TEXT	
set_header_bases . . . . . . . .	L Near	 0079	  _TEXT	
set_header_c . . . . . . . . . .	L Near	 00B3	  _TEXT	
set_header_g . . . . . . . . . .	L Near	 00DF	  _TEXT	
set_header_plus  . . . . . . . .	L Near	 00F5	  _TEXT	
set_header_t . . . . . . . . . .	L Near	 00C9	  _TEXT	
skip_space . . . . . . . . . . .	L Near	 02F8	  _TEXT	
sw_continua2 . . . . . . . . . .	L Near	 0288	  _TEXT	
sw_continue  . . . . . . . . . .	L Near	 0264	  _TEXT	
sw_do  . . . . . . . . . . . . .	L Near	 0245	  _TEXT	
sw_f . . . . . . . . . . . . . .	Byte	 03DD	  _DATA	
sw_m . . . . . . . . . . . . . .	Word	 03DE	  _DATA	
sw_n . . . . . . . . . . . . . .	Word	 03DB	  _DATA	
sw_store . . . . . . . . . . . .	L Near	 025A	  _TEXT	

	   0 Warnings
	   0 Errors
