Microsoft (R) Macro Assembler Version 6.11		    09/09/23 01:24:40
trabalho.asm						     Page 1 - 1


				; Trabalho Intel

				.model small
				.stack

 0000				.data
				ORG 80H             
 0080 00			CMDCNT DB ?          ; COMMAND LINE COUNT
 0081  007F [			CMDSTR DB 127 DUP(?)  ; COMMAND LINE BUFFER
        00
       ]
				; --------------------------------------------
				; DATA
				; --------------------------------------------
 = 000D				CR                          equ     0dh
 = 000A				LF                          equ     0ah

 0100  007F [			cmdline               db    127   dup(?)
        00
       ]
 017F  0032 [			input_file            db    50    dup(?)        ; Nome do arquivo de entrada
        00
       ]
 01B1  0032 [			output_file           db    50    dup(?)        ; Nome padrão do arquivo de saída
        00
       ]
 01E3 61 2E 6F 75 74 00		default_output_file   db    'a.out', 0       ; Nome padrão do arquivo de saída
 01E9  0005 [			nitrogen_bases        db    5     dup(?)
        00
       ]
 01EE  0005 [			s_nitrogen_bases      db    5     dup(?)
        00
       ]
 01F3 0000			file_size             dw    0
 01F5  0005 [			file_size_str         db    5     dup(?)
        00
       ]
 01FA 0000			base_a                dw    0
 01FC 0000			base_c                dw    0
 01FE 0000			base_t                dw    0
 0200 0000			base_g                dw    0
 0202 00			base_plus             db    0
 0203 0000			position              dw    0
 0205  0005 [			position_str          dw    5     dup(?)
        0000
       ]
 020F 0000			cur_position          dw    0
 0211 61 63 74 67 2B 00		base_valid            db    "actg+", 0
 0217 45 72 72 6F 20 6E		error_command_line  db   "Erro na linha de comando", CR, LF, 0
       61 20 6C 69 6E 68
       61 20 64 65 20 63
       6F 6D 61 6E 64 6F
       0D 0A 00
 0232 45 72 72 6F 20 6E		error_command_line_f  db   "Erro no argumento f", CR, LF, 0
       6F 20 61 72 67 75
       6D 65 6E 74 6F 20
       66 0D 0A 00
 0248 45 72 72 6F 20 6E		error_command_line_o  db   "Erro no argumento o", CR, LF, 0
       6F 20 61 72 67 75
       6D 65 6E 74 6F 20
       6F 0D 0A 00
 025E 45 72 72 6F 20 6E		error_command_line_n  db   "Erro no argumento n", CR, LF, 0
       6F 20 61 72 67 75
       6D 65 6E 74 6F 20
       6E 0D 0A 00
 0274 45 72 72 6F 20 6E		error_command_line_a  db   "Erro no argumento actg", CR, LF, 0
       6F 20 61 72 67 75
       6D 65 6E 74 6F 20
       61 63 74 67 0D 0A
       00
 028D 00			flag_error            db     0
 028E 0D 0A 00			msg_crlf              db    CR, LF, 0
 0291 4E 6F 6D 65 20 64		msg_input_file        db    "Nome do arquivo de entrada : ", 0
       6F 20 61 72 71 75
       69 76 6F 20 64 65
       20 65 6E 74 72 61
       64 61 20 3A 20 00
 02AF 4E 6F 6D 65 20 64		msg_output_file       db    "Nome do arquivo de saida : ", 0
       6F 20 61 72 71 75
       69 76 6F 20 64 65
       20 73 61 69 64 61
       20 3A 20 00
 02CB 54 61 6D 61 6E 68		msg_group_size        db    "Tamanho dos grupos de bases a serem calculados: ", 0
       6F 20 64 6F 73 20
       67 72 75 70 6F 73
       20 64 65 20 62 61
       73 65 73 20 61 20
       73 65 72 65 6D 20
       63 61 6C 63 75 6C
       61 64 6F 73 3A 20
       00
 02FC 49 6E 66 6F 72 6D		msg_information       db    "Informacoes a serem colocadas no arquivo de saida: ", 0
       61 63 6F 65 73 20
       61 20 73 65 72 65
       6D 20 63 6F 6C 6F
       63 61 64 61 73 20
       6E 6F 20 61 72 71
       75 69 76 6F 20 64
       65 20 73 61 69 64
       61 3A 20 00
 0330 4E 75 6D 65 72 6F		msg_bases_size_input  db    "Numero de bases no arquivo de entrada: ", 0
       20 64 65 20 62 61
       73 65 73 20 6E 6F
       20 61 72 71 75 69
       76 6F 20 64 65 20
       65 6E 74 72 61 64
       61 3A 20 00
 0358 4E 75 6D 65 72 6F		msg_group_count       db    "Numero de grupos a serem processados: ", 0
       20 64 65 20 67 72
       75 70 6F 73 20 61
       20 73 65 72 65 6D
       20 70 72 6F 63 65
       73 73 61 64 6F 73
       3A 20 00
 037F 4E 75 6D 65 72 6F		msg_lines_input_file  db    "Numero de linhas do arquivo de entrada que contém bases: ", 0
       20 64 65 20 6C 69
       6E 68 61 73 20 64
       6F 20 61 72 71 75
       69 76 6F 20 64 65
       20 65 6E 74 72 61
       64 61 20 71 75 65
       20 63 6F 6E 74 C3
       A9 6D 20 62 61 73
       65 73 3A 20 00
 03BA 45 72 72 6F 20 6E		error_open_file_msg   db    "Erro na abertura do arquivo.", CR, LF, 0
       61 20 61 62 65 72
       74 75 72 61 20 64
       6F 20 61 72 71 75
       69 76 6F 2E 0D 0A
       00
 03D9 45 72 72 6F 20 6E		error_read_file_msg   db    "Erro na leitura do arquivo.", CR, LF, 0
       61 20 6C 65 69 74
       75 72 61 20 64 6F
       20 61 72 71 75 69
       76 6F 2E 0D 0A 00
 03F7 45 72 72 6F 20 6E		error_create_file_msg db   "Erro na criacao do arquivo", CR, LF, 0
       61 20 63 72 69 61
       63 61 6F 20 64 6F
       20 61 72 71 75 69
       76 6F 0D 0A 00
 0414 45 72 72 6F 20 6E		error_write_file_msg  db    "Erro na escrita do arquivo", CR, LF, 0
       61 20 65 73 63 72
       69 74 61 20 64 6F
       20 61 72 71 75 69
       76 6F 0D 0A 00
 0431 0000			file_handle           dw    0                      ; Handler do arquivo de leitura
 0433 0000			file_handle_dst       dw    0                      ; Handler do arquivo de saida
 0435 00			file_buffer           db    0                      ; Buffer de leitura do arquivo
 0436 0000			sw_n                  dw    0
 0438 00			sw_f                  db    0
 0439 0000			sw_m                  dw    0
 043B 43 6F 75 6E 74 20		msg_base_a            db    "Count of 'A': ", 0
       6F 66 20 27 41 27
       3A 20 00
 044A 43 6F 75 6E 74 20		msg_base_c            db    "Count of 'C': ", 0
       6F 66 20 27 43 27
       3A 20 00
 0459 43 6F 75 6E 74 20		msg_base_t            db    "Count of 'T': ", 0
       6F 66 20 27 54 27
       3A 20 00
 0468 43 6F 75 6E 74 20		msg_base_g            db    "Count of 'G': ", 0
       6F 66 20 27 47 27
       3A 20 00
 0477  0006 [			base_a_str            db    6 dup (?)   ; Buffer para o contador de 'A' em formato de string
        00
       ]
 047D  0006 [			base_c_str            db    6 dup (?)   ; Buffer para o contador de 'C' em formato de string
        00
       ]
 0483  0006 [			base_t_str            db    6 dup (?)   ; Buffer para o contador de 'T' em formato de string
        00
       ]
 0489  0006 [			base_g_str            db    6 dup (?)   ; Buffer para o contador de 'G' em formato de string
        00
       ]
 048F  0006 [			base_at_str           db    6 dup (?)   ; Buffer para o contador de 'G' em formato de string
        00
       ]
 0495  0006 [			base_cg_str           db    6 dup (?)   ; Buffer para o contador de 'G' em formato de string
        00
       ]
 049B  0005 [			group_size_str        db    5     dup(?)               ; Tamanho do grupo de bases
        00
       ]
 04A0 00			group_size            db    0
				; --------------------------------------------
				; SCAN INPUT PARAMETER LINE

 0000				.code
				.startup
 0017  BE 0081			   mov      si, 81h
 001A  B5 00			   mov      ch,0
 001C  26: 8A 0E 0080		   mov      cl,es:[80h]      ; PARAMETER COUNT by variable CMDCNT
 0021  E8 0490			   call     get_commandline

 0024  8D 1E 028E R		   lea      bx, msg_crlf
 0028  E8 0449			   call     printf_s

 002B  E8 05CB			   call     sort_nitrogen_bases

				   ; Abre o arquivo
 002E  8D 16 017F R		   lea      dx, input_file
 0032  E8 0421			   call     fopen
 0035  73 03 E9 0312		   jc       error_open_file      ; If (CF == 1), erro ao abrir o arquivo
 003A  A3 0431 R		   mov      file_handle, ax      ; Salva handle do arquivo

 003D  8D 1E 0291 R		   lea bx, msg_input_file
 0041  E8 0430			   call printf_s
 0044  8D 1E 017F R		   lea bx, input_file
 0048  E8 0429			   call printf_s

 004B  8D 1E 028E R		   lea bx, msg_crlf
 004F  E8 0422			   call printf_s

 0052  8D 1E 0431 R		   lea      bx, file_handle
 0056  E8 061C			   call     calculate_file_size

 0059  A1 01F3 R		   mov      ax, file_size
 005C  8D 1E 01F5 R		   lea      bx, file_size_str
 0060  E8 038B			   call     sprintf_w

 0063  8D 1E 01B1 R		   lea      bx, output_file
 0067  83 3F 00			   cmp      [bx], 0
 006A  74 02			   je       default_file
 006C  EB 2A			   jmp      cmd_output_file

 006E				default_file:
 006E  8D 16 01E3 R		   lea      dx, default_output_file
 0072  E8 03F2			   call     fcreate
 0075  73 03 E9 02EF		   jc       error_create_file
 007A  A3 0433 R		   mov      file_handle_dst, ax      ; Salva handle do arquivo
 007D  8D 1E 0433 R		   lea      bx, file_handle_dst
 0081  8D 1E 02AF R		   lea bx, msg_output_file
 0085  E8 03EC			   call printf_s
 0088  8D 1E 01E3 R		   lea bx, default_output_file
 008C  E8 03E5			   call printf_s
 008F  8D 1E 028E R		   lea      bx, msg_crlf
 0093  E8 03DE			   call     printf_s
 0096  EB 2A			   jmp      loop_read_file

 0098				cmd_output_file:
 0098  8D 16 01B1 R		   lea      dx, output_file
 009C  E8 03C8			   call     fcreate
 009F  73 03 E9 02C5		   jc       error_create_file
 00A4  8D 1E 0433 R		   lea      bx, file_handle_dst
 00A8  A3 0433 R		   mov      file_handle_dst, ax      ; Salva handle do arquivo
 00AB  8D 1E 02AF R		   lea bx, msg_output_file
 00AF  E8 03C2			   call printf_s
 00B2  8D 1E 01B1 R		   lea bx, output_file
 00B6  E8 03BB			   call printf_s
 00B9  8D 1E 028E R		   lea      bx, msg_crlf
 00BD  E8 03B4			   call     printf_s
 00C0  EB 00			   jmp      loop_read_file

 00C2				loop_read_file:
 00C2  8D 36 01EE R		      lea   si, s_nitrogen_bases
 00C6				   set_header_bases:
 00C6  80 3C 00			      cmp   byte ptr [si], 0
 00C9  75 03 E9 009A		      je    start_count 
 00CE  80 3C 61			      cmp   byte ptr [si], 'a'
 00D1  74 16			      je    set_header_a
 00D3  80 3C 63			      cmp   byte ptr [si], 'c'
 00D6  74 27			      je    set_header_c
 00D8  80 3C 74			      cmp   byte ptr [si], 't'
 00DB  74 38			      je    set_header_t
 00DD  80 3C 67			      cmp   byte ptr [si], 'g'
 00E0  74 49			      je    set_header_g
 00E2  80 3C 2B			      cmp   byte ptr [si], '+'
 00E5  74 5A			      je    set_header_plus
 00E7  EB 7F			      jmp   start_count

 00E9				   set_header_a:
 00E9  B2 41			      mov   dl, 'A'
 00EB  8B 1E 0433 R		      mov   bx, file_handle_dst
 00EF  E8 0398			      call  set_char
 00F2  46			      inc   si
 00F3  80 3C 00			      cmp   byte ptr [si], 0
 00F6  74 70			      je    start_count
 00F8  B2 3B			      mov   dl, 3bh
 00FA  E8 038D			      call  set_char
 00FD  EB C7			      jmp   set_header_bases
 00FF				   set_header_c:
 00FF  B2 43			      mov   dl, 'C'
 0101  8B 1E 0433 R		      mov   bx, file_handle_dst
 0105  E8 0382			      call  set_char
 0108  46			      inc   si
 0109  80 3C 00			      cmp   byte ptr [si], 0
 010C  74 5A			      je    start_count
 010E  B2 3B			      mov   dl, 3bh
 0110  E8 0377			      call  set_char
 0113  EB B1			      jmp   set_header_bases
 0115				   set_header_t:
 0115  B2 54			      mov   dl, 'T'
 0117  8B 1E 0433 R		      mov   bx, file_handle_dst
 011B  E8 036C			      call  set_char
 011E  46			      inc   si
 011F  80 3C 00			      cmp   byte ptr [si], 0
 0122  74 44			      je    start_count
 0124  B2 3B			      mov   dl, 3bh
 0126  E8 0361			      call  set_char
 0129  EB 9B			      jmp   set_header_bases
 012B				   set_header_g:
 012B  B2 47			      mov   dl, 'G'
 012D  8B 1E 0433 R		      mov   bx, file_handle_dst
 0131  E8 0356			      call  set_char
 0134  46			      inc   si
 0135  80 3C 00			      cmp   byte ptr [si], 0
 0138  74 2E			      je    start_count
 013A  B2 3B			      mov   dl, 3bh
 013C  E8 034B			      call  set_char
 013F  EB 85			      jmp   set_header_bases

 0141				   set_header_plus:
 0141  B2 41			      mov   dl, 'A'
 0143  8B 1E 0433 R		      mov   bx, file_handle_dst
 0147  E8 0340			      call  set_char
 014A  B2 2B			      mov   dl, 2bh
 014C  E8 033B			      call  set_char
 014F  B2 54			      mov   dl, 'T'
 0151  E8 0336			      call  set_char
 0154  B2 3B			      mov   dl, 3bh
 0156  E8 0331			      call  set_char
 0159  B2 43			      mov   dl, 'C'
 015B  E8 032C			      call  set_char
 015E  B2 2B			      mov   dl, 2bh
 0160  E8 0327			      call  set_char
 0163  B2 47			      mov   dl, 'G'
 0165  E8 0322			      call  set_char
 0168				   start_count:   
 0168  8D 1E 01F3 R		      lea     bx, file_size
 016C  8B 0F			      mov     cx, [bx]
 016E  8D 1E 04A0 R		      lea     bx, group_size
 0172  2B 0F			      sub     cx, [bx]
 0174  7D 03 E9 0265		      jl      file_less_than_group
 0179  89 0E 0203 R		      mov     position, cx
 017D  FF 0E 020F R		      dec     cur_position
 0181				   count_bases:
 0181  FF 06 020F R		      inc     cur_position
 0185  8B 1E 0433 R		      mov     bx, file_handle_dst
 0189  8B 0E 020F R		      mov     cx, cur_position
 018D  3B 0E 0203 R		      cmp     cx, position
 0191  75 03 E9 01EF		      je      close_and_final
 0196  B2 0D			      mov     dl, CR
 0198  E8 02EF			      call    set_char
 019B  B2 0A			      mov     dl, LF
 019D  E8 02EA			      call    set_char
 01A0  8D 36 01EE R		      lea     si, s_nitrogen_bases
 01A4  C7 06 01FA R 0000	      mov     base_a, 0
 01AA  C7 06 01FC R 0000	      mov     base_c, 0
 01B0  C7 06 01FE R 0000	      mov     base_t, 0
 01B6  C7 06 0200 R 0000	      mov     base_g, 0
 01BC  8D 1E 04A0 R		      lea     bx, group_size
 01C0  8B 0F			      mov     cx, [bx]
 01C2  51			      push    cx
 01C3  8B 1E 0431 R		      mov     bx, file_handle
 01C7  B4 42			      mov     ah, 42h
 01C9  8B 1E 0431 R		      mov     bx, file_handle
 01CD  2B C9			      sub     cx, cx
 01CF  8B 16 020F R		      mov     dx, cur_position ; CX:DX=+7
 01D3  B0 00			      mov     al, 0h  ; from beginning
 01D5  CD 21			      int     21h
 01D7  59			      pop     cx
 01D8				      count_bases_loop:
 01D8  83 F9 00			         cmp     cx, 0
 01DB  74 58			         je      set_count_bases
 01DD  51			         push    cx
 01DE  E8 0265			         call    get_char
 01E1  73 03 E9 0175		         jc      error_read_file
 01E6  80 FA 00			         cmp     dl, 0
 01E9  75 03 E9 0197		         jz      close_and_final
 01EE  8A C2			         mov     al, dl
				         ; Check for 'A', 'C', 'T', 'G' and update counters
 01F0  3C 41			         cmp     al, 'A'
 01F2  74 0E			         je      increment_a
 01F4  3C 43			         cmp     al, 'C'
 01F6  74 13			         je      increment_c
 01F8  3C 54			         cmp     al, 'T'
 01FA  74 18			         je      increment_t
 01FC  3C 47			         cmp     al, 'G'
 01FE  74 1D			         je      increment_g
 0200  EB 24			         jmp     error_unknown_char
				         
 0202				         increment_a:
 0202  59			            pop     cx
 0203  FF 06 01FA R		            inc     base_a
 0207  49			            dec     cx
 0208  51			            push    cx
 0209  EB CD			            jmp     count_bases_loop

 020B				         increment_c:
 020B  59			            pop     cx
 020C  FF 06 01FC R		            inc     base_c
 0210  49			            dec     cx
 0211  51			            push    cx
 0212  EB C4			            jmp     count_bases_loop

 0214				         increment_t:
 0214  59			            pop     cx
 0215  FF 06 01FE R		            inc     base_t
 0219  49			            dec     cx
 021A  51			            push    cx
 021B  EB BB			            jmp     count_bases_loop

 021D				         increment_g:
 021D  59			            pop     cx
 021E  FF 06 0200 R		            inc     base_g
 0222  49			            dec     cx
 0223  51			            push    cx
 0224  EB B2			            jmp     count_bases_loop

 0226				         error_unknown_char:
 0226  8D 1E 0414 R		            lea   bx, error_write_file_msg
 022A  E8 0247			            call  printf_s
 022D  C6 06 028D R 01		            mov   flag_error, 1
 0232  E9 0150			            jmp   close_and_final

 0235				         set_count_bases:
 0235  80 3C 00			            cmp   byte ptr [si], 0
 0238  75 03 E9 FF44		            je    count_bases 
 023D  80 3C 61			            cmp   byte ptr [si], 'a'
 0240  74 1D			            je    set_count_a
 0242  80 3C 63			            cmp   byte ptr [si], 'c'
 0245  74 3F			            je    set_count_c
 0247  80 3C 74			            cmp   byte ptr [si], 't'
 024A  74 61			            je    set_count_t
 024C  80 3C 67			            cmp   byte ptr [si], 'g'
 024F  75 03 E9 0081		            je    set_count_g
 0254  80 3C 2B			            cmp   byte ptr [si], '+'
 0257  75 03 E9 00A1		            je    set_count_plus
 025C  E9 FF22			            jmp   count_bases
				            ; put base_a in its location in file
 025F				            set_count_a:
 025F  A1 01FA R		               mov   ax, base_a
 0262  8D 1E 0477 R		               lea   bx, base_a_str
 0266  E8 0185			               call  sprintf_w
 0269  8B 1E 0433 R		               mov   bx, file_handle_dst
 026D  8D 3E 0477 R		               lea   di, base_a_str
 0271				               set_count_a_loop:
 0271  8A 15			                  mov   dl, [di]
 0273  80 FA 00			                  cmp   dl, 0
 0276  74 06			                  je    end_set_count_a_loop
 0278  E8 020F			                  call  set_char
 027B  47			                  inc   di
 027C  EB F3			                  jmp   set_count_a_loop
 027E				               end_set_count_a_loop:
 027E  B2 3B			                  mov   dl, 3bh
 0280  E8 0207			                  call  set_char
 0283  46			                  inc   si
 0284  EB AF			                  jmp   set_count_bases
 0286				            set_count_c:
 0286  A1 01FC R		               mov   ax, base_c
 0289  8D 1E 047D R		               lea   bx, base_c_str
 028D  E8 015E			               call  sprintf_w
 0290  8B 1E 0433 R		               mov   bx, file_handle_dst
 0294  8D 3E 047D R		               lea   di, base_c_str
 0298				               set_count_c_loop:
 0298  8A 15			                  mov   dl, [di]
 029A  80 FA 00			                  cmp   dl, 0
 029D  74 06			                  je    end_set_count_c_loop
 029F  E8 01E8			                  call  set_char
 02A2  47			                  inc   di
 02A3  EB F3			                  jmp   set_count_c_loop
 02A5				               end_set_count_c_loop:
 02A5  B2 3B			                  mov   dl, 3bh
 02A7  E8 01E0			                  call  set_char
 02AA  46			                  inc   si
 02AB  EB 88			                  jmp   set_count_bases
 02AD				            set_count_t:
 02AD  A1 01FE R		               mov   ax, base_t
 02B0  8D 1E 0483 R		               lea   bx, base_t_str
 02B4  E8 0137			               call  sprintf_w
 02B7  8B 1E 0433 R		               mov   bx, file_handle_dst
 02BB  8D 3E 0483 R		               lea   di, base_t_str
 02BF				               set_count_t_loop:
 02BF  8A 15			                  mov   dl, [di]
 02C1  80 FA 00			                  cmp   dl, 0
 02C4  74 06			                  je    end_set_count_t_loop
 02C6  E8 01C1			                  call  set_char
 02C9  47			                  inc   di
 02CA  EB F3			                  jmp   set_count_t_loop
 02CC				               end_set_count_t_loop:
 02CC  B2 3B			                  mov   dl, 3bh
 02CE  E8 01B9			                  call  set_char
 02D1  46			                  inc   si
 02D2  E9 FF60			                  jmp   set_count_bases
 02D5				            set_count_g:
 02D5  A1 0200 R		               mov   ax, base_g
 02D8  8D 1E 0489 R		               lea   bx, base_g_str
 02DC  E8 010F			               call  sprintf_w
 02DF  8B 1E 0433 R		               mov   bx, file_handle_dst
 02E3  8D 3E 0489 R		               lea   di, base_g_str
 02E7				               set_count_g_loop:
 02E7  8A 15			                  mov   dl, [di]
 02E9  80 FA 00			                  cmp   dl, 0
 02EC  74 06			                  je    end_set_count_g_loop
 02EE  E8 0199			                  call  set_char
 02F1  47			                  inc   di
 02F2  EB F3			                  jmp   set_count_g_loop
 02F4				               end_set_count_g_loop:
 02F4  B2 3B			                  mov   dl, 3bh
 02F6  E8 0191			                  call  set_char
 02F9  46			                  inc   si
 02FA  E9 FF38			                  jmp   set_count_bases
 02FD				            set_count_plus:
 02FD  A1 01FA R		                  mov   ax, base_a
 0300  03 06 01FE R		                  add   ax, base_t
 0304  8D 1E 048F R		                  lea   bx, base_at_str
 0308  E8 00E3			                  call  sprintf_w
 030B  8B 1E 0433 R		                  mov   bx, file_handle_dst
 030F  8D 3E 048F R		                  lea   di, base_at_str
 0313				               set_count_at_loop:
 0313  8A 15			                  mov   dl, [di]
 0315  80 FA 00			                  cmp   dl, 0
 0318  74 06			                  je    end_set_count_at_loop
 031A  E8 016D			                  call  set_char
 031D  47			                  inc   di
 031E  EB F3			                  jmp   set_count_at_loop
 0320				               end_set_count_at_loop:
 0320  B2 3B			                  mov   dl, 3bh
 0322  E8 0165			                  call  set_char
 0325  A1 01FC R		                  mov   ax, base_c
 0328  03 06 0200 R		                  add   ax, base_g
 032C  8D 1E 0495 R		                  lea   bx, base_cg_str
 0330  E8 00BB			                  call  sprintf_w
 0333  8B 1E 0433 R		                  mov   bx, file_handle_dst
 0337  8D 3E 0495 R		                  lea   di, base_cg_str
 033B				               set_count_cg_loop:
 033B  8A 15			                  mov   dl, [di]
 033D  80 FA 00			                  cmp   dl, 0
 0340  74 06			                  je    end_set_count_plus
 0342  E8 0145			                  call  set_char
 0345  47			                  inc   di
 0346  EB F3			                  jmp   set_count_cg_loop
 0348				               end_set_count_plus:
 0348  46			                  inc   si
 0349  E9 FEE9			                  jmp   set_count_bases

 034C				error_open_file:
 034C  8D 1E 03BA R		      lea   bx, error_open_file_msg
 0350  E8 0121			      call  printf_s
 0353  C6 06 028D R 01		      mov   flag_error, 1
 0358  E9 008F			      jmp   final

 035B				error_read_file:
 035B  8D 1E 03D9 R		      lea   bx, error_read_file_msg
 035F  E8 0112			      call  printf_s
 0362  C6 06 028D R 01		      mov   flag_error, 1
 0367  EB 1C			      jmp   close_and_final

 0369				error_create_file:
 0369  8D 1E 03F7 R		      lea   bx, error_create_file_msg
 036D  E8 0104			      call  printf_s
 0370  C6 06 028D R 01		      mov   flag_error, 1
 0375  EB 0E			      jmp   close_and_final

 0377				error_write_file:
 0377  8D 1E 0414 R		      lea   bx, error_write_file_msg
 037B  E8 00F6			      call  printf_s
 037E  C6 06 028D R 01		      mov   flag_error, 1
 0383  EB 00			      jmp   close_and_final

 0385				close_and_final:

				    ; Display counts of 'A', 'C', 'T', 'G'
				    ; Após incrementar cada contador (increment_a, increment_c, increment_t, increment_g), converta o valor para string
				   
 0385  8D 1E 02CB R		   lea bx, msg_group_size
 0389  E8 00E8			   call printf_s
 038C  8D 1E 049B R		   lea bx, group_size_str
 0390  E8 00E1			   call printf_s
 0393  8D 1E 028E R		   lea bx, msg_crlf
 0397  E8 00DA			   call printf_s
 039A  8D 1E 02FC R		   lea bx, msg_information
 039E  E8 00D3			   call printf_s
 03A1  8D 1E 01EE R		   lea bx, s_nitrogen_bases
 03A5  E8 00CC			   call printf_s
 03A8  8D 1E 028E R		   lea bx, msg_crlf
 03AC  E8 00C5			   call printf_s
 03AF  8D 1E 0330 R		   lea bx, msg_bases_size_input
 03B3  E8 00BE			   call printf_s
 03B6  8D 1E 01F5 R		   lea bx, file_size_str
 03BA  E8 00B7			   call printf_s
 03BD  8D 1E 028E R		   lea bx, msg_crlf  
 03C1  E8 00B0			   call printf_s
 03C4  8D 1E 0358 R		   lea bx, msg_group_count
 03C8  E8 00A9			   call printf_s
 03CB  8D 1E 0205 R		   lea bx, position_str
 03CF  A1 0203 R		   mov      ax, position
 03D2  E8 0019			   call     sprintf_w
 03D5  8D 1E 0205 R		   lea bx,position_str
 03D9  E8 0098			   call printf_s

 03DC  EB 0C			   jmp   final

 03DE				   file_less_than_group:
 03DE  8D 1E 0414 R		      lea   bx, error_write_file_msg
 03E2  E8 008F			      call  printf_s
 03E5  C6 06 028D R 01		      mov   flag_error,1

 03EA				final:
				      .exit

				;
				; --------------------------------------------------------------------
				; Função: Converte um inteiro (n) para (string)
				;        sprintf(string->BX, "%d", n->AX)
				; --------------------------------------------------------------------
 03EE				sprintf_w proc near
 03EE  A3 0436 R		   mov   sw_n, ax
 03F1  B9 0005			   mov   cx, 5
 03F4  C7 06 0439 R 2710	   mov   sw_m, 10000
 03FA  C6 06 0438 R 00		   mov   sw_f, 0

 03FF				sw_do:
 03FF  BA 0000			   mov   dx, 0
 0402  A1 0436 R		   mov   ax, sw_n
 0405  F7 36 0439 R		   div   sw_m

 0409  3C 00			   cmp   al, 0
 040B  75 07			   jne   sw_store
 040D  80 3E 0438 R 00		   cmp   sw_f, 0
 0412  74 0A			   je    sw_continue
 0414				sw_store:
 0414  04 30			   add   al, '0'
 0416  88 07			   mov   [bx], al
 0418  43			   inc   bx

 0419  C6 06 0438 R 01		   mov   sw_f, 1
 041E				sw_continue:

 041E  89 16 0436 R		   mov   sw_n, dx

 0422  BA 0000			   mov   dx, 0
 0425  A1 0439 R		   mov   ax, sw_m
 0428  BD 000A			   mov   bp, 10
 042B  F7 F5			   div   bp
 042D  A3 0439 R		   mov   sw_m, ax

 0430  49			   dec   cx
 0431  83 F9 00			   cmp   cx, 0
 0434  75 C9			   jnz   sw_do

 0436  80 3E 0438 R 00		   cmp   sw_f, 0
 043B  75 05			   jnz   sw_continua2
 043D  C7 07 0030		   mov   [bx], '0'
 0441  43			   inc   bx
 0442				sw_continua2:

 0442  C6 07 00			   mov   byte ptr [bx], 0
 0445  C3			   ret
 0446				sprintf_w endp

				;
				; --------------------------------------------------------------------
				; Função Le um caractere do arquivo identificado pelo HANDLE BX
				; get_char(handle->BX)
				; Entra: BX -> file handle
				; Sai:   DL -> caractere
				; AX -> numero de caracteres lidos
				; CF -> "0" se leitura ok
				; --------------------------------------------------------------------
 0446				get_char proc near
 0446  B4 3F			   mov   ah, 3fh
 0448  B9 0001			   mov   cx, 1
 044B  8D 16 0435 R		   lea   dx, file_buffer
 044F  CD 21			   int   21h
 0451  8A 16 0435 R		   mov   dl, file_buffer
 0455  C3			   ret
 0456				get_char endp

				;
				; --------------------------------------------------------------------
				; Função Abre o arquivo cujo nome está no string apontado por DX
				; boolean fopen(char *FileName -> DX)
				; Entra: DX -> ponteiro para o string com o nome do arquivo
				; Sai:   AX -> handle do arquivo
				; CF -> 0, se OK
				; --------------------------------------------------------------------
 0456				fopen proc near
 0456  B0 00			   mov   al, 0
 0458  B4 3D			   mov   ah, 3dh
 045A  CD 21			   int   21h
 045C  C3			   ret
 045D				fopen endp

				;
				; --------------------------------------------------------------------
				; --------------------------------------------------------------------
 045D				fseek proc near
 045D  8B 1E 0431 R		   mov   bx, file_handle
 0461  B8 4200			   mov   ax, 4200h
 0464  CD 21			   int   21h
 0466  C3			   ret
 0467				fseek endp

				;
				; --------------------------------------------------------------------
				; Função Cria o arquivo cujo nome está no string apontado por DX
				; boolean fcreate(char *FileName -> DX)
				; Sai:   AX -> handle do arquivo
				; CF -> 0, se OK
				; --------------------------------------------------------------------
 0467				fcreate proc near
 0467  B9 0000			   mov   cx, 0
 046A  B4 3C			   mov   ah, 3ch
 046C  CD 21			   int   21h
 046E  C3			   ret
 046F				fcreate endp

				;
				; --------------------------------------------------------------------
				; Entra: BX -> file handle
				; Sai: CF -> "0" se OK
				; --------------------------------------------------------------------
 046F				fclose proc near
 046F  B4 3E			   mov   ah, 3eh
 0471  CD 21			   int   21h
 0473  C3			   ret
 0474				fclose endp

				;
				; --------------------------------------------------------------------
				; Função Escrever um string na tela
				; printf_s(char *s -> BX)
				; --------------------------------------------------------------------
 0474				printf_s proc near
 0474  8A 17			   mov   dl, [bx]
 0476  80 FA 00			   cmp   dl, 0
 0479  74 09			   je    ps_1

 047B  53			   push  bx
 047C  B4 02			   mov   ah, 2
 047E  CD 21			   int   21h
 0480  5B			   pop   bx

 0481  43			   inc   bx
 0482  EB F0			   jmp   printf_s

 0484				ps_1:
 0484  C3			   ret
 0485				printf_s endp

				;
				; --------------------------------------------------------------------
				; Função Escrever um char na tela
				; Entra: DL -> Char a ser escrito
				; --------------------------------------------------------------------
 0485				printf_c proc near
 0485  B4 02			   mov   ah, 2
 0487  CD 21			   int   21h
 0489  C3			   ret
 048A				printf_c endp

				;
				; --------------------------------------------------------------------
				; Entra: BX -> file handle
				; dl -> caractere
				; Sai: AX -> numero de caracteres escritos
				; CF -> "0" se escrita ok
				; --------------------------------------------------------------------
 048A				set_char proc near
 048A  B4 40			   mov   ah, 40h
 048C  B9 0001			   mov   cx, 1
 048F  88 16 0435 R		   mov   file_buffer, dl
 0493  8D 16 0435 R		   lea   dx, file_buffer
 0497  CD 21			   int   21h
 0499  C3			   ret
 049A				set_char endp

				;
				; --------------------------------------------------------------------
				; Função: Converte um ASCII-DECIMAL para HEXA
				; Entra: (S) -> DS:BX -> Ponteiro para o string de origem
				; Sai: (A) -> AX -> Valor "Hex" resultante
				; Algoritmo:
				; A = 0;
				; while (*S!='\0') {
				; A = 10 * A + (*S - '0')
				; ++S;
				; }
				; return
				; --------------------------------------------------------------------
 049A				atoi proc near

				   ; A = 0;
 049A  B8 0000			   mov ax, 0

 049D				   atoi_2:
				   ; while (*S!='\0') {
 049D  80 3F 00			   cmp byte ptr [bx], 0
 04A0  74 11			   jz atoi_1

				   ; A = 10 * A
 04A2  B9 000A			   mov cx, 10
 04A5  F7 E1			   mul cx

				   ; A = A + *S
 04A7  B5 00			   mov ch, 0
 04A9  8A 0F			   mov cl, [bx]
 04AB  03 C1			   add ax, cx

				   ; A = A - '0'
 04AD  83 E8 30			   sub ax, '0'

				   ; ++S
 04B0  43			   inc bx

				   ;}
 04B1  EB EA			   jmp atoi_2

 04B3				   atoi_1:
				   ; return
 04B3  C3			   ret

 04B4				atoi endp

				;
				; --------------------------------------------------------------------
				; Parse commandline in arguments
				; --------------------------------------------------------------------
 04B4				get_commandline proc near
 04B4  83 F9 00			   cmp cx, 0
 04B7  75 03			   jnz parse_command_line          ; YES - PROCESS COMMAND LINE PARAMETERS
 04B9  E9 012A			   jmp no_arguments           ; NO - PARAMETERS

 04BC				parse_command_line:
 04BC				   skip_space:
 04BC  26: 8A 04		      mov al, es:[si]
 04BF  3C 20			      cmp al, ' '
 04C1  74 0A			      je next_option
 04C3  3C 0D			      cmp al, CR
 04C5  75 03 E9 011C		      je no_arguments
 04CA  46			      inc si
 04CB  EB EF			      jmp skip_space

 04CD				   next_option:
 04CD  46			      inc si
 04CE  26: 8A 04		      mov al, es:[si]

				      ; Verificar se encontramos uma opção válida
 04D1  3C 2D			      cmp al, '-'
 04D3  74 03 E9 00BE		      jne invalid_option

				      ; Move string pointer
 04D8  46			      inc si
 04D9  26: 8A 04		      mov al, es:[si]
 04DC  3C 0D			      cmp al, CR
 04DE  75 03 E9 00B3		      je invalid_option
 04E3  3C 66			      cmp al, 'f'
 04E5  74 0A			      je f_option
 04E7  3C 6F			      cmp al, 'o'
 04E9  74 26			      je o_option
 04EB  3C 6E			      cmp al, 'n'
 04ED  74 42			      je n_option
 04EF  EB 6F			      jmp base_option

 04F1				   f_option:
 04F1  8D 3E 017F R		      lea di, input_file
 04F5  46			      inc si
 04F6  26: 8A 04		      mov al, es:[si]
 04F9  3C 20			      cmp al, ' '
 04FB  74 03 E9 00A6		      jne invalid_option_f
 0500				      f_option_loop:
 0500  46			         inc si
 0501  26: 8A 04		         mov al, es:[si]
 0504  3C 20			         cmp al, ' '
 0506  74 B4			         je skip_space
 0508  3C 0D			         cmp al, CR
 050A  74 B0			         je skip_space
 050C  88 05			         mov [di], al
 050E  47			         inc di
 050F  EB EF			         jmp f_option_loop

 0511				   o_option:
 0511  8D 3E 01B1 R		      lea di, output_file
 0515  46			      inc si
 0516  26: 8A 04		      mov al, es:[si]
 0519  3C 20			      cmp al, ' '
 051B  74 03 E9 0096		      jne invalid_option_o
 0520				      o_option_loop:
 0520  46			         inc si
 0521  26: 8A 04		         mov al, es:[si]
 0524  3C 20			         cmp al, ' '
 0526  74 94			         je skip_space
 0528  3C 0D			         cmp al, CR
 052A  74 90			         je skip_space
 052C  88 05			         mov [di], al
 052E  47			         inc di
 052F  EB EF			         jmp o_option_loop

 0531				   n_option:
 0531  8D 3E 049B R		      lea di, group_size_str
 0535  46			      inc si
 0536  26: 8A 04		      mov al, es:[si]
 0539  3C 20			      cmp al, ' '
 053B  74 03 E9 0086		      jne invalid_option_n
 0540				      n_option_loop:
 0540  46			         inc si
 0541  26: 8A 04		         mov al, es:[si]
 0544  3C 20			         cmp al, ' '
 0546  74 11			         je end_n_option
 0548  3C 0D			         cmp al, CR
 054A  74 0D			         je end_n_option
 054C  3C 39			         cmp al, 39h
 054E  7F 76			         jg invalid_option_n
 0550  3C 30			         cmp al, 30h
 0552  7C 72			         jl invalid_option_n
 0554  88 05			         mov [di], al
 0556  47			         inc di
 0557  EB E7			         jmp n_option_loop
 0559				      end_n_option:
 0559  C7 05 0000		         mov      [di], 0
 055D  E9 FF5C			         jmp      skip_space

 0560				   base_option:
 0560  8D 3E 0211 R		      lea di, base_valid    ; di = base_valid initial adress
 0564  8D 1E 01E9 R		      lea bx, nitrogen_bases
 0568  3C 20			      cmp al, ' '           ; if space invalid
 056A  74 6A			      je invalid_option_a
 056C  3C 0D			      cmp al, CR            ; if cr invalid
 056E  74 66			      je invalid_option_a
 0570				   base_check_loop:
 0570  8D 3E 0211 R		      lea di, base_valid    ; di = base_valid initial adress
 0574  26: 8A 04		      mov al, es:[si]       ; al = cmdline char
 0577  3C 20			      cmp al, ' '           ; if space base_cmd ended
 0579  74 18			      je done_parsing_base
 057B  3C 0D			      cmp al, CR            ; if cr base_cmd ended
 057D  74 14			      je done_parsing_base
 057F				   base_valid_loop:
 057F  80 3D 00			      cmp byte ptr [di], 0
 0582  74 52			      je invalid_option_a
 0584  8A 0D			      mov cl, [di]
 0586  38 C1			      cmp cl, al
 0588  74 03			      je valid_base
 058A  47			      inc di
 058B  EB F2			      jmp base_valid_loop

 058D				valid_base:
 058D  88 07			      mov [bx], al
 058F  43			      inc bx
 0590  46			      inc si
 0591  EB DD			      jmp base_check_loop

 0593				done_parsing_base:
 0593  E9 FF26			      jmp      skip_space

 0596				invalid_option:
 0596  8D 1E 0217 R		      lea bx, error_command_line
 059A  E8 FED7			      call printf_s
 059D  C6 06 028D R 01		      mov flag_error, 1
				      .exit
 05A6				invalid_option_f:
 05A6  8D 1E 0232 R		      lea bx, error_command_line_f
 05AA  E8 FEC7			      call printf_s
 05AD  C6 06 028D R 01		      mov flag_error, 1
				      .exit
 05B6				invalid_option_o:
 05B6  8D 1E 0248 R		      lea bx, error_command_line_o
 05BA  E8 FEB7			      call printf_s
 05BD  C6 06 028D R 01		      mov flag_error, 1
				      .exit
 05C6				invalid_option_n:
 05C6  8D 1E 025E R		      lea bx, error_command_line_n
 05CA  E8 FEA7			      call printf_s
 05CD  C6 06 028D R 01		      mov flag_error, 1
				      .exit
 05D6				invalid_option_a:
 05D6  8D 1E 025E R		      lea bx, error_command_line_n
 05DA  E8 FE97			      call printf_s
 05DD  C6 06 028D R 01		      mov flag_error, 1
				      .exit

 05E6				no_arguments:
 05E6  8D 1E 049B R		      lea      bx, group_size_str
 05EA  E8 FEAD			      call     atoi
 05ED  8D 1E 04A0 R		      lea      bx, group_size
 05F1  89 07			      mov      [bx], ax
 05F3  83 F8 00			      cmp      ax, 0
 05F6  74 9E			      je       invalid_option
 05F8  C3			      ret
 05F9				get_commandline endp

				;
				; --------------------------------------------------------------------
				; Sort nitrogen bases command line parameter
				; --------------------------------------------------------------------
 05F9				sort_nitrogen_bases  proc  near

 05F9  8D 3E 01E9 R		      lea   di,nitrogen_bases
 05FD  8D 36 01EE R		      lea   si,s_nitrogen_bases
 0601				   s_loop_a:
 0601  8A 15			      mov   dl, [di]
 0603  80 FA 00			      cmp   dl, 0
 0606  74 0D			      je    end_put_a
 0608  80 FA 61			      cmp   dl, 'a'
 060B  74 03			      je    s_put_a
 060D  47			      inc   di
 060E  EB F1			      jmp   s_loop_a
 0610				   s_put_a:
 0610  C7 04 0061		      mov   [si],'a'
 0614  46			      inc   si 
 0615				   end_put_a:
 0615  8D 3E 01E9 R		      lea   di,nitrogen_bases
 0619				   s_loop_t:
 0619  8A 15			      mov   dl, [di]
 061B  80 FA 00			      cmp   dl, 0
 061E  74 0D			      je    end_put_t
 0620  80 FA 74			      cmp   dl, 't'
 0623  74 03			      je    s_put_t
 0625  47			      inc   di
 0626  EB F1			      jmp   s_loop_t
 0628				   s_put_t:
 0628  C7 04 0074		      mov   [si],'t'
 062C  46			      inc   si
 062D				   end_put_t:
 062D  8D 3E 01E9 R		      lea   di,nitrogen_bases
 0631				   s_loop_c:
 0631  8A 15			      mov   dl, [di]
 0633  80 FA 00			      cmp   dl, 0
 0636  74 0D			      je    end_put_c
 0638  80 FA 63			      cmp   dl, 'c'
 063B  74 03			      je    s_put_c
 063D  47			      inc   di
 063E  EB F1			      jmp   s_loop_c
 0640				   s_put_c:
 0640  C7 04 0063		      mov   [si],'c'
 0644  46			      inc   si
 0645				   end_put_c:
 0645  8D 3E 01E9 R		      lea   di,nitrogen_bases
 0649				   s_loop_g:
 0649  8A 15			      mov   dl, [di]
 064B  80 FA 00			      cmp   dl, 0
 064E  74 0D			      je    end_put_g
 0650  80 FA 67			      cmp   dl, 'g'
 0653  74 03			      je    s_put_g
 0655  47			      inc   di
 0656  EB F1			      jmp   s_loop_g
 0658				   s_put_g:
 0658  C7 04 0067		      mov   [si],'g'
 065C  46			      inc   si
 065D				   end_put_g:
 065D  8D 3E 01E9 R		      lea   di, nitrogen_bases
 0661				   s_loop_plus:
 0661  8A 15			      mov   dl, [di]
 0663  80 FA 00			      cmp   dl, 0
 0666  74 0C			      je    s_ret
 0668  80 FA 2B			      cmp   dl, '+'
 066B  74 03			      je    s_put_plus
 066D  47			      inc   di
 066E  EB F1			      jmp   s_loop_plus
 0670				   s_put_plus:
 0670  C7 04 002B		      mov   [si],'+'
 0674				   s_ret:
 0674  C3			      ret
 0675				sort_nitrogen_bases endp


				; Função para calcular o tamanho de caracteres no arquivo lido
				; Entrada: BX -> file handle
				; Saída: DX:AX -> tamanho do arquivo em caracteres

 0675				calculate_file_size proc near
 0675  33 C0			   xor ax, ax        ; Inicialize AX com 0
 0677  33 C9			   xor cx, cx        ; Inicialize CX com 0 para usar como contador

 0679				cfs_read_loop:
 0679  8B 1E 0431 R		   mov   bx, file_handle
 067D  E8 FDC6			   call  get_char
 0680  73 03 E9 FCD6		   jc    error_read_file
 0685  83 F8 00			   cmp   ax, 0
 0688  74 06			   jz    end_of_file
 068A  FF 06 01F3 R		   inc   file_size
 068E  EB E9			   jmp   cfs_read_loop

 0690				end_of_file:
 0690  C3			   ret
 0691				calculate_file_size endp

				; --------------------------------------------------------------------
				; Print a formatted message with a carriage return and line feed
				; --------------------------------------------------------------------
 0691				printf_crlf proc near
 0691  8D 1E 028E R		   lea bx, msg_crlf
 0695  E8 FDDC			   call printf_s
 0698  C3			   ret
 0699				printf_crlf endp

				; --------------------------------------------------------------------
				; Print a formatted message with a line feed
				; --------------------------------------------------------------------
 0699				printf_lf proc near
 0699  BB 000A			   mov bx, LF
 069C  E8 FDD5			   call printf_s
 069F  C3			   ret
 06A0				printf_lf endp

				; --------------------------------------------------------------------
				; Print a formatted message with a carriage return
				; --------------------------------------------------------------------
 06A0				printf_cr proc near
 06A0  BB 000D			   mov bx, CR
 06A3  E8 FDCE			   call printf_s
 06A6  C3			   ret
 06A7				printf_cr endp

				; --------------------------------------------------------------------
				; Print a formatted message followed by a carriage return and line feed
				; --------------------------------------------------------------------
 06A7				printf_crlf_s proc near
 06A7  E8 FDCA			   call printf_s
 06AA  E8 FFE4			   call printf_crlf
 06AD  C3			   ret
 06AE				printf_crlf_s endp

				; --------------------------------------------------------------------
				; Function: Clear the command line buffer
				; --------------------------------------------------------------------
 06AE				clear_cmdline_buffer proc near
 06AE  BF 0100 R		   mov di, offset cmdline
 06B1  B9 0080			   mov cx, 128
 06B4  32 C0			   xor al, al
 06B6  F3/ AA			   rep stosb
 06B8  C3			   ret
 06B9				clear_cmdline_buffer endp

				end

Microsoft (R) Macro Assembler Version 6.11		    09/09/23 01:24:40
trabalho.asm						     Symbols 2 - 1




Segments and Groups:

                N a m e                 Size     Length   Align   Combine Class

DGROUP . . . . . . . . . . . . .	GROUP
_DATA  . . . . . . . . . . . . .	16 Bit	 04A1	  Word	  Public  'DATA'	
STACK  . . . . . . . . . . . . .	16 Bit	 0400	  Para	  Stack	  'STACK'	 
_TEXT  . . . . . . . . . . . . .	16 Bit	 06B9	  Word	  Public  'CODE'	


Procedures,  parameters and locals:

                N a m e                 Type     Value    Attr

atoi . . . . . . . . . . . . . .	P Near	 049A	  _TEXT	Length= 001A Private
calculate_file_size  . . . . . .	P Near	 0675	  _TEXT	Length= 001C Private
clear_cmdline_buffer . . . . . .	P Near	 06AE	  _TEXT	Length= 000B Private
fclose . . . . . . . . . . . . .	P Near	 046F	  _TEXT	Length= 0005 Private
fcreate  . . . . . . . . . . . .	P Near	 0467	  _TEXT	Length= 0008 Private
fopen  . . . . . . . . . . . . .	P Near	 0456	  _TEXT	Length= 0007 Private
fseek  . . . . . . . . . . . . .	P Near	 045D	  _TEXT	Length= 000A Private
get_char . . . . . . . . . . . .	P Near	 0446	  _TEXT	Length= 0010 Private
get_commandline  . . . . . . . .	P Near	 04B4	  _TEXT	Length= 0145 Private
printf_crlf_s  . . . . . . . . .	P Near	 06A7	  _TEXT	Length= 0007 Private
printf_crlf  . . . . . . . . . .	P Near	 0691	  _TEXT	Length= 0008 Private
printf_cr  . . . . . . . . . . .	P Near	 06A0	  _TEXT	Length= 0007 Private
printf_c . . . . . . . . . . . .	P Near	 0485	  _TEXT	Length= 0005 Private
printf_lf  . . . . . . . . . . .	P Near	 0699	  _TEXT	Length= 0007 Private
printf_s . . . . . . . . . . . .	P Near	 0474	  _TEXT	Length= 0011 Private
set_char . . . . . . . . . . . .	P Near	 048A	  _TEXT	Length= 0010 Private
sort_nitrogen_bases  . . . . . .	P Near	 05F9	  _TEXT	Length= 007C Private
sprintf_w  . . . . . . . . . . .	P Near	 03EE	  _TEXT	Length= 0058 Private


Symbols:

                N a m e                 Type     Value    Attr

@CodeSize  . . . . . . . . . . .	Number	 0000h	 
@DataSize  . . . . . . . . . . .	Number	 0000h	 
@Interface . . . . . . . . . . .	Number	 0000h	 
@Model . . . . . . . . . . . . .	Number	 0002h	 
@Startup . . . . . . . . . . . .	L Near	 0000	  _TEXT	
@code  . . . . . . . . . . . . .	Text   	 _TEXT
@data  . . . . . . . . . . . . .	Text   	 DGROUP
@fardata?  . . . . . . . . . . .	Text   	 FAR_BSS
@fardata . . . . . . . . . . . .	Text   	 FAR_DATA
@stack . . . . . . . . . . . . .	Text   	 DGROUP
CMDCNT . . . . . . . . . . . . .	Byte	 0080	  _DATA	
CMDSTR . . . . . . . . . . . . .	Byte	 0081	  _DATA	
CR . . . . . . . . . . . . . . .	Number	 000Dh	 
LF . . . . . . . . . . . . . . .	Number	 000Ah	 
atoi_1 . . . . . . . . . . . . .	L Near	 04B3	  _TEXT	
atoi_2 . . . . . . . . . . . . .	L Near	 049D	  _TEXT	
base_a_str . . . . . . . . . . .	Byte	 0477	  _DATA	
base_at_str  . . . . . . . . . .	Byte	 048F	  _DATA	
base_a . . . . . . . . . . . . .	Word	 01FA	  _DATA	
base_c_str . . . . . . . . . . .	Byte	 047D	  _DATA	
base_cg_str  . . . . . . . . . .	Byte	 0495	  _DATA	
base_check_loop  . . . . . . . .	L Near	 0570	  _TEXT	
base_c . . . . . . . . . . . . .	Word	 01FC	  _DATA	
base_g_str . . . . . . . . . . .	Byte	 0489	  _DATA	
base_g . . . . . . . . . . . . .	Word	 0200	  _DATA	
base_option  . . . . . . . . . .	L Near	 0560	  _TEXT	
base_plus  . . . . . . . . . . .	Byte	 0202	  _DATA	
base_t_str . . . . . . . . . . .	Byte	 0483	  _DATA	
base_t . . . . . . . . . . . . .	Word	 01FE	  _DATA	
base_valid_loop  . . . . . . . .	L Near	 057F	  _TEXT	
base_valid . . . . . . . . . . .	Byte	 0211	  _DATA	
cfs_read_loop  . . . . . . . . .	L Near	 0679	  _TEXT	
close_and_final  . . . . . . . .	L Near	 0385	  _TEXT	
cmd_output_file  . . . . . . . .	L Near	 0098	  _TEXT	
cmdline  . . . . . . . . . . . .	Byte	 0100	  _DATA	
count_bases_loop . . . . . . . .	L Near	 01D8	  _TEXT	
count_bases  . . . . . . . . . .	L Near	 0181	  _TEXT	
cur_position . . . . . . . . . .	Word	 020F	  _DATA	
default_file . . . . . . . . . .	L Near	 006E	  _TEXT	
default_output_file  . . . . . .	Byte	 01E3	  _DATA	
done_parsing_base  . . . . . . .	L Near	 0593	  _TEXT	
end_n_option . . . . . . . . . .	L Near	 0559	  _TEXT	
end_of_file  . . . . . . . . . .	L Near	 0690	  _TEXT	
end_put_a  . . . . . . . . . . .	L Near	 0615	  _TEXT	
end_put_c  . . . . . . . . . . .	L Near	 0645	  _TEXT	
end_put_g  . . . . . . . . . . .	L Near	 065D	  _TEXT	
end_put_t  . . . . . . . . . . .	L Near	 062D	  _TEXT	
end_set_count_a_loop . . . . . .	L Near	 027E	  _TEXT	
end_set_count_at_loop  . . . . .	L Near	 0320	  _TEXT	
end_set_count_c_loop . . . . . .	L Near	 02A5	  _TEXT	
end_set_count_g_loop . . . . . .	L Near	 02F4	  _TEXT	
end_set_count_plus . . . . . . .	L Near	 0348	  _TEXT	
end_set_count_t_loop . . . . . .	L Near	 02CC	  _TEXT	
error_command_line_a . . . . . .	Byte	 0274	  _DATA	
error_command_line_f . . . . . .	Byte	 0232	  _DATA	
error_command_line_n . . . . . .	Byte	 025E	  _DATA	
error_command_line_o . . . . . .	Byte	 0248	  _DATA	
error_command_line . . . . . . .	Byte	 0217	  _DATA	
error_create_file_msg  . . . . .	Byte	 03F7	  _DATA	
error_create_file  . . . . . . .	L Near	 0369	  _TEXT	
error_open_file_msg  . . . . . .	Byte	 03BA	  _DATA	
error_open_file  . . . . . . . .	L Near	 034C	  _TEXT	
error_read_file_msg  . . . . . .	Byte	 03D9	  _DATA	
error_read_file  . . . . . . . .	L Near	 035B	  _TEXT	
error_unknown_char . . . . . . .	L Near	 0226	  _TEXT	
error_write_file_msg . . . . . .	Byte	 0414	  _DATA	
error_write_file . . . . . . . .	L Near	 0377	  _TEXT	
f_option_loop  . . . . . . . . .	L Near	 0500	  _TEXT	
f_option . . . . . . . . . . . .	L Near	 04F1	  _TEXT	
file_buffer  . . . . . . . . . .	Byte	 0435	  _DATA	
file_handle_dst  . . . . . . . .	Word	 0433	  _DATA	
file_handle  . . . . . . . . . .	Word	 0431	  _DATA	
file_less_than_group . . . . . .	L Near	 03DE	  _TEXT	
file_size_str  . . . . . . . . .	Byte	 01F5	  _DATA	
file_size  . . . . . . . . . . .	Word	 01F3	  _DATA	
final  . . . . . . . . . . . . .	L Near	 03EA	  _TEXT	
flag_error . . . . . . . . . . .	Byte	 028D	  _DATA	
group_size_str . . . . . . . . .	Byte	 049B	  _DATA	
group_size . . . . . . . . . . .	Byte	 04A0	  _DATA	
increment_a  . . . . . . . . . .	L Near	 0202	  _TEXT	
increment_c  . . . . . . . . . .	L Near	 020B	  _TEXT	
increment_g  . . . . . . . . . .	L Near	 021D	  _TEXT	
increment_t  . . . . . . . . . .	L Near	 0214	  _TEXT	
input_file . . . . . . . . . . .	Byte	 017F	  _DATA	
invalid_option_a . . . . . . . .	L Near	 05D6	  _TEXT	
invalid_option_f . . . . . . . .	L Near	 05A6	  _TEXT	
invalid_option_n . . . . . . . .	L Near	 05C6	  _TEXT	
invalid_option_o . . . . . . . .	L Near	 05B6	  _TEXT	
invalid_option . . . . . . . . .	L Near	 0596	  _TEXT	
loop_read_file . . . . . . . . .	L Near	 00C2	  _TEXT	
msg_base_a . . . . . . . . . . .	Byte	 043B	  _DATA	
msg_base_c . . . . . . . . . . .	Byte	 044A	  _DATA	
msg_base_g . . . . . . . . . . .	Byte	 0468	  _DATA	
msg_base_t . . . . . . . . . . .	Byte	 0459	  _DATA	
msg_bases_size_input . . . . . .	Byte	 0330	  _DATA	
msg_crlf . . . . . . . . . . . .	Byte	 028E	  _DATA	
msg_group_count  . . . . . . . .	Byte	 0358	  _DATA	
msg_group_size . . . . . . . . .	Byte	 02CB	  _DATA	
msg_information  . . . . . . . .	Byte	 02FC	  _DATA	
msg_input_file . . . . . . . . .	Byte	 0291	  _DATA	
msg_lines_input_file . . . . . .	Byte	 037F	  _DATA	
msg_output_file  . . . . . . . .	Byte	 02AF	  _DATA	
n_option_loop  . . . . . . . . .	L Near	 0540	  _TEXT	
n_option . . . . . . . . . . . .	L Near	 0531	  _TEXT	
next_option  . . . . . . . . . .	L Near	 04CD	  _TEXT	
nitrogen_bases . . . . . . . . .	Byte	 01E9	  _DATA	
no_arguments . . . . . . . . . .	L Near	 05E6	  _TEXT	
o_option_loop  . . . . . . . . .	L Near	 0520	  _TEXT	
o_option . . . . . . . . . . . .	L Near	 0511	  _TEXT	
output_file  . . . . . . . . . .	Byte	 01B1	  _DATA	
parse_command_line . . . . . . .	L Near	 04BC	  _TEXT	
position_str . . . . . . . . . .	Word	 0205	  _DATA	
position . . . . . . . . . . . .	Word	 0203	  _DATA	
ps_1 . . . . . . . . . . . . . .	L Near	 0484	  _TEXT	
s_loop_a . . . . . . . . . . . .	L Near	 0601	  _TEXT	
s_loop_c . . . . . . . . . . . .	L Near	 0631	  _TEXT	
s_loop_g . . . . . . . . . . . .	L Near	 0649	  _TEXT	
s_loop_plus  . . . . . . . . . .	L Near	 0661	  _TEXT	
s_loop_t . . . . . . . . . . . .	L Near	 0619	  _TEXT	
s_nitrogen_bases . . . . . . . .	Byte	 01EE	  _DATA	
s_put_a  . . . . . . . . . . . .	L Near	 0610	  _TEXT	
s_put_c  . . . . . . . . . . . .	L Near	 0640	  _TEXT	
s_put_g  . . . . . . . . . . . .	L Near	 0658	  _TEXT	
s_put_plus . . . . . . . . . . .	L Near	 0670	  _TEXT	
s_put_t  . . . . . . . . . . . .	L Near	 0628	  _TEXT	
s_ret  . . . . . . . . . . . . .	L Near	 0674	  _TEXT	
set_count_a_loop . . . . . . . .	L Near	 0271	  _TEXT	
set_count_at_loop  . . . . . . .	L Near	 0313	  _TEXT	
set_count_a  . . . . . . . . . .	L Near	 025F	  _TEXT	
set_count_bases  . . . . . . . .	L Near	 0235	  _TEXT	
set_count_c_loop . . . . . . . .	L Near	 0298	  _TEXT	
set_count_cg_loop  . . . . . . .	L Near	 033B	  _TEXT	
set_count_c  . . . . . . . . . .	L Near	 0286	  _TEXT	
set_count_g_loop . . . . . . . .	L Near	 02E7	  _TEXT	
set_count_g  . . . . . . . . . .	L Near	 02D5	  _TEXT	
set_count_plus . . . . . . . . .	L Near	 02FD	  _TEXT	
set_count_t_loop . . . . . . . .	L Near	 02BF	  _TEXT	
set_count_t  . . . . . . . . . .	L Near	 02AD	  _TEXT	
set_header_a . . . . . . . . . .	L Near	 00E9	  _TEXT	
set_header_bases . . . . . . . .	L Near	 00C6	  _TEXT	
set_header_c . . . . . . . . . .	L Near	 00FF	  _TEXT	
set_header_g . . . . . . . . . .	L Near	 012B	  _TEXT	
set_header_plus  . . . . . . . .	L Near	 0141	  _TEXT	
set_header_t . . . . . . . . . .	L Near	 0115	  _TEXT	
skip_space . . . . . . . . . . .	L Near	 04BC	  _TEXT	
start_count  . . . . . . . . . .	L Near	 0168	  _TEXT	
sw_continua2 . . . . . . . . . .	L Near	 0442	  _TEXT	
sw_continue  . . . . . . . . . .	L Near	 041E	  _TEXT	
sw_do  . . . . . . . . . . . . .	L Near	 03FF	  _TEXT	
sw_f . . . . . . . . . . . . . .	Byte	 0438	  _DATA	
sw_m . . . . . . . . . . . . . .	Word	 0439	  _DATA	
sw_n . . . . . . . . . . . . . .	Word	 0436	  _DATA	
sw_store . . . . . . . . . . . .	L Near	 0414	  _TEXT	
valid_base . . . . . . . . . . .	L Near	 058D	  _TEXT	

	   0 Warnings
	   0 Errors
