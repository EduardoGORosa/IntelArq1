Microsoft (R) Macro Assembler Version 6.11		    09/05/23 24:03:26
teste.asm						     Page 1 - 1


				;             Trabalho Intel
				;
				;         Eduardo Rosa   00335503

				.model small
				.stack

 0000				COMSEG SEGMENT PARA PUBLIC 'CODE'
				ASSUME CS:COMSEG,DS:COMSEG,ES:COMSEG,SS:COMSEG

				ORG 80H             
 0080 00			CMDCNT DB ?          ;COMMAND LINE COUNT
 0081  007F [			CMDSTR DB 127 DUP(?)  ;COMMAND LINE BUFFER
        00
       ]
				   
 0100				START PROC FAR
 0100  E9 00E0			       JMP ENTRY     ;JUMP PASS DATA
				;--------------------------------------------
				; DATA
				;--------------------------------------------
 = 000D				CR					      equ		0dh
 = 000A				LF					      equ		0ah

 0103  007F [			cmdline              db    127 dup(?)
        00
       ]
 0182  0032 [			inputFile            db    50 dup(?)     ; Nome do arquivo de entrada
        00
       ]
 01B4 61 2E 6F 75 74 00		outputFile           db    'a.out',0       ; Nome padrão do arquivo de saída
 01BA 0000			groupSize            dw    0               ; Tamanho do grupo de bases
 01BC 45 72 72 6F 20 6E		ErrorCommandLineMsg	db		"Erro na escrita da linha de comando", CR, LF, 0
       61 20 65 73 63 72
       69 74 61 20 64 61
       20 6C 69 6E 68 61
       20 64 65 20 63 6F
       6D 61 6E 64 6F 0D
       0A 00
 01E2 00			FlagError				db		0
				;--------------------------------------------
				;SCAN INPUT PARAMETER LINE

 01E3				ENTRY:  
 01E3  BE 0081 R		   mov      si, offset CMDSTR ;STRING
 01E6  B5 00			   mov      ch,0
 01E8  26: 8A 0E 0080		   mov      cl,es:[80h]      ;PARAMETER COUNT by variable CMDCNT
 01ED  83 F9 00			   cmp      cx,0
 01F0  75 02			   jnz      parse_command_line          ;YES - PROCESS COMMAND LINE PARAMETERS
 01F2  EB 73			   jmp      no_arguments           ;NO - PARAMETERS
				   
 01F4				parse_command_line:   
 01F4				   skip_space:
 01F4  8A 04			      mov   al, [si]
 01F6  3C 20			      cmp   al, ' '
 01F8  74 07			      je    next_option
 01FA  3C 0D			      cmp   al, CR
 01FC  74 58			      je    invalid_option
 01FE  46			      inc   si
 01FF  EB F3			      jmp   skip_space
				   
 0201				   next_option:
 0201  46			      inc   si
 0202  8A 04			      mov   al, [si]

				      ; Verificar se encontramos uma opção válida
 0204  3C 2D			      cmp   al, '-'
 0206  75 4E			      jne   invalid_option
 0208  3C 0D			      cmp   al, CR
 020A  74 4A			      je    invalid_option

						; Move string pointer
 020C  46					inc   si
 020D  8A 04					mov   al, [si]
 020F  3C 0D			      cmp   al, CR
 0211  74 43			      je    invalid_option
 0213  3C 66					cmp   al, 'f'
 0215  74 0A			      je    f_option
 0217  3C 6F					cmp   al, 'o'
 0219  74 20			      je    o_option
 021B  3C 6E					cmp   al, 'n'
 021D  74 25			      je    n_option
 021F  EB 2C			      jmp   actg_option

 0221				   f_option:
 0221  8D 3E 0182 R		      lea   di, inputFile
 0225  46			      inc   si
 0226  8A 04			      mov   al, [si]
 0228  3C 20			      cmp   al, ' '
 022A  75 2A			      jne   invalid_option
 022C				      f_option_loop:
 022C  46			         inc   si
 022D  8A 04			         mov   al, [si]
 022F  3C 20			         cmp   al, ' '
 0231  74 C1			         je    skip_space
 0233  3C 0D			         cmp   al, CR
 0235  74 BD			         je    skip_space
				         ;inc   di
 0237  88 05			         mov   [di], al
 0239  EB F1			         jmp   f_option_loop 

 023B					o_option:
 023B  8D 1E 01BC R		      lea   bx,ErrorCommandLineMsg
 023F  E8 0033			      call  printf_s
 0242  EB B0				   jmp   skip_space

 0244					n_option:
 0244  8D 1E 01BC R		      lea   bx,ErrorCommandLineMsg
 0248  E8 002A			      call  printf_s
 024B  EB A7				   jmp   skip_space

 024D					actg_option:
 024D  8D 1E 01BC R		      lea   bx,ErrorCommandLineMsg
 0251  E8 0021			      call  printf_s
 0254  EB 0E			      jmp   done_parsing

 0256				    invalid_option:
 0256  8D 1E 01BC R		      lea   bx,ErrorCommandLineMsg
 025A  E8 0018			      call  printf_s
 025D  C6 06 01E2 R 01		      mov	FlagError,1
 0262  EB 03			      jmp   no_arguments
 0264				    done_parsing:
 0264  CB			      ret

 0265  E2 8D			      LOOP     parse_command_line
				   
 0267  90			no_arguments:  NOP

 0268  8D 1E 0182 R		      lea   bx,inputFile
 026C  E8 0006			      call  printf_s
				;RETURN TO DOS
 026F				DONE: 
 026F  1E			   PUSH     DS
 0270  B8 0000			   MOV      AX,0
 0273  50			   PUSH     AX
 0274  CB			   RET
 0275				START ENDP

				;
				;--------------------------------------------------------------------
				;Função Escrever um string na tela
				;		printf_s(char *s -> BX)
				;--------------------------------------------------------------------
 0275				printf_s	proc	near
 0275  8A 17				mov		dl,[bx]
 0277  80 FA 00				cmp		dl,0
 027A  74 09				je		   ps_1

 027C  53				push	   bx
 027D  B4 02				mov		ah,2
 027F  CD 21				int		21H
 0281  5B				pop		bx

 0282  43				inc		bx		
 0283  EB F0				jmp		printf_s
						
 0285				ps_1:
 0285  C3				ret
 0286				printf_s	endp

				;
				;--------------------------------------------------------------------
				;Função Escrever um char na tela
				;		Entra: DL -> Char a ser escrito
				;--------------------------------------------------------------------
 0286				printf_c	proc	near
 0286  B4 02					mov		ah, 2
 0288  CD 21					int		21H
 028A  C3					ret
 028B				printf_c	endp

 028B				COMSEG ENDS

				END START
Microsoft (R) Macro Assembler Version 6.11		    09/05/23 24:03:26
teste.asm						     Symbols 2 - 1




Segments and Groups:

                N a m e                 Size     Length   Align   Combine Class

COMSEG . . . . . . . . . . . . .	16 Bit	 028B	  Para	  Public  'CODE'	
DGROUP . . . . . . . . . . . . .	GROUP
_DATA  . . . . . . . . . . . . .	16 Bit	 0000	  Word	  Public  'DATA'	
STACK  . . . . . . . . . . . . .	16 Bit	 0400	  Para	  Stack	  'STACK'	 
_TEXT  . . . . . . . . . . . . .	16 Bit	 0000	  Word	  Public  'CODE'	


Procedures,  parameters and locals:

                N a m e                 Type     Value    Attr

START  . . . . . . . . . . . . .	P Far	 0100	  COMSEG	Length= 0175 Private
printf_c . . . . . . . . . . . .	P Near	 0286	  COMSEG	Length= 0005 Private
printf_s . . . . . . . . . . . .	P Near	 0275	  COMSEG	Length= 0011 Private


Symbols:

                N a m e                 Type     Value    Attr

@CodeSize  . . . . . . . . . . .	Number	 0000h	 
@DataSize  . . . . . . . . . . .	Number	 0000h	 
@Interface . . . . . . . . . . .	Number	 0000h	 
@Model . . . . . . . . . . . . .	Number	 0002h	 
@code  . . . . . . . . . . . . .	Text   	 _TEXT
@data  . . . . . . . . . . . . .	Text   	 DGROUP
@fardata?  . . . . . . . . . . .	Text   	 FAR_BSS
@fardata . . . . . . . . . . . .	Text   	 FAR_DATA
@stack . . . . . . . . . . . . .	Text   	 DGROUP
CMDCNT . . . . . . . . . . . . .	Byte	 0080	  COMSEG	
CMDSTR . . . . . . . . . . . . .	Byte	 0081	  COMSEG	
CR . . . . . . . . . . . . . . .	Number	 000Dh	 
DONE . . . . . . . . . . . . . .	L Near	 026F	  COMSEG	
ENTRY  . . . . . . . . . . . . .	L Near	 01E3	  COMSEG	
ErrorCommandLineMsg  . . . . . .	Byte	 01BC	  COMSEG	
FlagError  . . . . . . . . . . .	Byte	 01E2	  COMSEG	
LF . . . . . . . . . . . . . . .	Number	 000Ah	 
actg_option  . . . . . . . . . .	L Near	 024D	  COMSEG	
cmdline  . . . . . . . . . . . .	Byte	 0103	  COMSEG	
done_parsing . . . . . . . . . .	L Near	 0264	  COMSEG	
f_option_loop  . . . . . . . . .	L Near	 022C	  COMSEG	
f_option . . . . . . . . . . . .	L Near	 0221	  COMSEG	
groupSize  . . . . . . . . . . .	Word	 01BA	  COMSEG	
inputFile  . . . . . . . . . . .	Byte	 0182	  COMSEG	
invalid_option . . . . . . . . .	L Near	 0256	  COMSEG	
n_option . . . . . . . . . . . .	L Near	 0244	  COMSEG	
next_option  . . . . . . . . . .	L Near	 0201	  COMSEG	
no_arguments . . . . . . . . . .	L Near	 0267	  COMSEG	
o_option . . . . . . . . . . . .	L Near	 023B	  COMSEG	
outputFile . . . . . . . . . . .	Byte	 01B4	  COMSEG	
parse_command_line . . . . . . .	L Near	 01F4	  COMSEG	
ps_1 . . . . . . . . . . . . . .	L Near	 0285	  COMSEG	
skip_space . . . . . . . . . . .	L Near	 01F4	  COMSEG	

	   0 Warnings
	   0 Errors
